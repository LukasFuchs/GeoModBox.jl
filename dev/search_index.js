var documenterSearchIndex = {"docs":
[{"location":"man/DiffMain/#Energy-Conservation-Equation","page":"General","title":"Energy Conservation Equation","text":"","category":"section"},{"location":"man/DiffMain/","page":"General","title":"General","text":"&emsp; The conservation of energy is a fundamental principle in physics and defines that the loss and generation of energy needs to be equal within a closed system. In terms of a geodynamical problem, energy is described by temperature, which is transported mainly through conductive and convective processes, such that a general energy equation is defined as followed (assuming only radioactive heat sources):","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"\nbeginequation\nleft(fracpartial Epartial t + overrightarrowv cdot nabla Eright) + fracpartial q_ipartial x_i = rho H\nendequation\n\n\nwhere the energy is described as E=c_p rho T","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":", and c<sub>p</sub> is the specific heat capacity [J/kg/K], ρ is a reference density [kg/m<sup>3</sup>], T is the temperature [K], t is the time [s], overrightarrowv is the velocity vector [m/s], q<sub>i</sub> is the heat flux in direction of i  [W/m<sup>2</sup>], ∂/∂xi is a directional derivative in direction of i, and H the heat production rate per mass [W/kg]. The repeated index means a summation of derivatives. This conservation law contains the variation of the heat flux in a certain direction, where the heat flux is defined by the Fourier’s law as followed: ","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"\\","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"begin{equation} \\overrightarrow{q} = - k \\nabla T, \\end{equation} $","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"where k is the thermal conductivity [W/m/K]. The heat flux is the amount of heat that passes through a unit surface area, per unit time and is positive in the direction of decreasing temperature, that is in the case when the temperature gradient is negative. The temperature conservation equation in an Eulerian form can then be written as: ","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"\\","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"begin{equation} \\rho cp \\left(\\frac{\\partial T}{\\partial t} + \\overrightarrow{v} \\cdot \\nabla T\\right) = -\\frac{\\partial qi}{\\partial x_i} + \\rho H. \\end{equation} $","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"&emsp;This form of the temperature equation describes the variation of temperature due to a conductive (right hand side of the equation) and convective (left hand side of the equation) process. For a matter of simplicity, one can consider those terms in a separate manner and solve the temperature conservation equation using an operator splitting method, that is one first solves the convective part, followed by the conductive part. ","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"&emsp; This directory focusses on examples for the conductive part of the temperature conservation equation using different numerical finite difference schemes applicable to one- and two-dimensional problem. ","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"<!–","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"Scaling","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"–>","category":"page"},{"location":"man/listoffunctions/#List-of-all-functions","page":"List of functions","title":"List of all functions","text":"","category":"section"},{"location":"man/listoffunctions/","page":"List of functions","title":"List of functions","text":"Here an overview of all functions:","category":"page"},{"location":"man/listoffunctions/","page":"List of functions","title":"List of functions","text":"Modules = [GeoModBox]","category":"page"},{"location":"man/DiffTwoD/#Heat-Diffusion-Equation-(2D)","page":"Heat Diffusion Equation (2D)","title":"Heat Diffusion Equation (2D)","text":"","category":"section"},{"location":"man/MomentumMain/#Momentum-Equation","page":"Momentum Equation","title":"Momentum Equation","text":"","category":"section"},{"location":"man/GESolution/#Solving-Differential-Equations","page":"Solution","title":"Solving Differential Equations","text":"","category":"section"},{"location":"man/GESolution/#Staggered-Finite-Difference","page":"Solution","title":"Staggered Finite Difference","text":"","category":"section"},{"location":"man/license/","page":"-","title":"-","text":"MIT License","category":"page"},{"location":"man/license/","page":"-","title":"-","text":"Copyright (c) 2024 Goethe Universität Frankfurt, Institut für Geowissenschaften","category":"page"},{"location":"man/license/","page":"-","title":"-","text":"Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:","category":"page"},{"location":"man/license/","page":"-","title":"-","text":"The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.","category":"page"},{"location":"man/license/","page":"-","title":"-","text":"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","category":"page"},{"location":"#GeoModBox.jl","page":"Home","title":"GeoModBox.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The Geodynamic Modelling ToolBox is a julia package mainly used for teaching purposes. The package provides different finite difference, staggered, discretization schemes to numerically solve the governing equations for a two-dimensional geodynamic problem. The governing equations are the conservation equations of ","category":"page"},{"location":"","page":"Home","title":"Home","text":"energy, \nmomentum, \nmass and compositon. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The GeoModBox.jl includes a series of exercises and examples of different geodynamically well defined problems. The exercises are given as Jupyter notebooks for the students to complete. The theoretical background is mainly given here in the documentation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Staggered-Finite-Difference","page":"Home","title":"Staggered Finite Difference","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#[Energy-Conservation-Equation](./man/DiffMain.md)","page":"Home","title":"Energy Conservation Equation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In geodynamics, the energy is described by the temperature and needs to be conserved within a closed system. Here, we solve the temperature conservation equation, or temperature equation, using an operator splitting method, that is, we first solve the advective part of the temperature equation, followed by the diffusive part. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#[Heat-Diffusion-Equation](./man/DiffOneD.md)","page":"Home","title":"Heat Diffusion Equation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The GeoModBox.jl provides different finite difference (FD) schemes (e.g., forward and backward Euler, Crank-Nicholson approach, ADI) to solve the diffusive part of the time-dependent or steady-state temperature equation including radioactive heating, in 1-D and 2-D. The solvers are located in src/HeatEquation. So far, only Dirichlet and Neumann thermal boundary conditions are available. Currently, most of the functions assume constant thermal parameters (except for the 1-D solvers). ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The examples of solving the heat diffusion equation include, amongst others: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"the determination of an oceanic and continental 1-D geotherm profile, \na comparison of the different FD-schemes applied on a 1-D gaussian temperature anomaly, \na 2-D resolution test for each FD-scheme using a gaussian temperature anomaly, and\na resolution test for a 2-D poisson problem. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"For more examples see the example folder. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The exercises include solving ","category":"page"},{"location":"","page":"Home","title":"Home","text":"the 1-D diffusion equation using the forward and backward Euler methods, \na 2-D poisson problem, and\na time-dependent temperature distribution within the lithosphere assuming a plume or sill.","category":"page"},{"location":"#[Heat-Advection-Equation](./man/AdvectMain.md)","page":"Home","title":"Heat Advection Equation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To solve the advective part of the temperature equation, the GeoModBox.jl provides the following different methods: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"an upwind scheme,\nthe staggered -leaped frog scheme, \na semi-lagrangian advection, and\npassive tracers/markers. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The solvers for a the tracer advection method are located in src/Tracers, where the remaining advection routines are located in src/AdvectionEquation. The routines are structured in such a way, that any property, as long as the property is defined on the centroids including ghost nodes on all boundaries, can be advected with the first three advection methods listed above. Using passive tracers, one can, so far, choose to either advect the temperature or phases. In case of advecting phases, one can define a certain rheology (eta) or density (rho) associated to each phase. The phase ID is used to interpolate the corresponding property from the tracers to the centroids. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"A key aspect for the advection equation is the conservation of the amplitude and the shape of an anomaly. Depending on the method, numerical diffusion or interpolation effects lead to strong deviations of the initial anomaly. For more details see here. The GeoModBox.jl contains several routines to setup a certain initial anomaly, either for properties defined on their correspondig grid (i.e., temperature, velocity, or phase) or for tracers advecting (so far) a certain temperature or phase. Within the examples and the exercise one can choose different initial temperature and velocity conditions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The examples for a two dimensional advection problem include:","category":"page"},{"location":"","page":"Home","title":"Home","text":"a 2-D advection, assuming a constant velocity field (e.g., a rigid body rotation), and\na resolution test of the same advection example. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The exercises include a: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"1-D advection of a gaussian or block anomaly, and\na 2-D advection coupled with the solution of the diffusion equation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#[Momentum-Conservation-Equation](./man/MomentumMain.md)","page":"Home","title":"Momentum Conservation Equation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Code-Structure","page":"Home","title":"Code Structure","text":"","category":"section"},{"location":"#Initial-Conditions","page":"Home","title":"Initial Conditions","text":"","category":"section"},{"location":"#Scaling","page":"Home","title":"Scaling","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#[Benchmarks-and-Examples](https://github.com/LukasFuchs/GeoModBox.jl/blob/main/examples/)","page":"Home","title":"Benchmarks and Examples","text":"","category":"section"},{"location":"#[Gaussian-Temperature-Diffusion](https://github.com/LukasFuchs/GeoModBox.jl/blob/main/examples/DiffusionEquation/2D/Gaussian_Diffusion.jl)","page":"Home","title":"Gaussian Temperature Diffusion","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: GaussianDiffusion)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Figure 1. Gaussian Diffusion. Time-dependent, diffusive solution of a 2-D Gaussian temperature anomaly using the Crank-Nicholson approach in comparison to its analytical solution. Top Left: 2-D temperature field of the numerical solution and isotherms lines of the numerical (solid black) and analytical (dashed yellow) solution. Top Right: Total deviation to the analytical solution. Bottom Left: 1-D y-profile along x=0. Bottom Right: Root Mean Square total devation of the temperature over time. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: GDResTest)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Figure 2. Resolution test. Maximum RMS varepsilon, maximum, and mean temperature for each FD-scheme and multiple resolutions. ","category":"page"},{"location":"#[Rigid-Body-Rotation](https://github.com/LukasFuchs/GeoModBox.jl/blob/main/examples/AdvectionEquation/2D_Advection.jl)","page":"Home","title":"Rigid-Body-Rotation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: RigidBodyI)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: RigidBodyII)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: RigidBodyIII)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Figure 3. Rigid-Body-Rotation. Time-dependent solution of a rotating circular temperature anomaly using the upwind (first), semi-lagrangian (second), and tracer (third) method. Within a circular area of our model domain the velocity is set to the velocity of a rigid rotation and outside euqal to zero. The temperature is scaled by the maximum temperature of the anomaly. ","category":"page"},{"location":"#[Falling-Block](https://github.com/LukasFuchs/GeoModBox.jl/blob/main/examples/StokesEquation/2D/FallingBlockBenchmark.jl)","page":"Home","title":"Falling Block","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: FallingBlockTD)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Figure 4. Isoviscous Falling Block. Time-dependent solution of an isoviscous falling block example. The problem is solved with a solver for variable viscosities. The tracers advect the phase ID, which is used to interpolate the density and viscosity on the centroids and vertices, respectively. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: FBSinkinVeloc)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Figure 5. Falling Block Sinking Velocity. Sinking velocity of the block with respect to the viscosity ratio eta_r at the initial condition. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: FBFinalStage)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Figure 6. Falling Block Benchmark. Final tracers distribution for specific cases with eta_r ge 0. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"man/AdvectMain/#Advection-Equation","page":"Advection Equation","title":"Advection Equation","text":"","category":"section"},{"location":"man/DiffOneD/#Temperature-Equation-(1D)","page":"1D","title":"Temperature Equation (1D)","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"In one dimension, the conductive part of the temperature conservation equation, or temperature equation is described by (assuming only radiogenic heat sources):","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nfracpartial Tpartial t = -fracpartial q_xpartial x + rho H\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"or including Fourier’s law (assuming variable thermal parameters):","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nfracpartial Tpartial t = fracpartialpartial x k_x fracpartial Tpartial x + rho H \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Assuming that the thermal parameters are constant, equation (2) simplifies to: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nfracpartial Tpartial t = kappa fracpartial^2 Tpartial x^2 + fracQrho c_p\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where kappa = krho c_p is the thermal diffusivity [ m<sup>2</sup>/s ] and Q=rho H is the heat production rate per volume [W/m<sup>3</sup>]. Equation (3) is a parabolic partial differential equation (PDE) which can be solved numerically in different manners, assuming initial and boundary conditions are defined. ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"First, we would like to discuss a simple, but effective, finite difference method to discretize and solve the equation, that is the forward in time and centered in space (FTCS) method in an explicit manner. This finite difference scheme will converge to the exact solution for small Delta x and Delta t. The advantage of an explicit description is that it is simple to derive and rather fast computationally. However, it is only numerically stable as long as the heat diffusion stability criterion is fulfilled. The stability criterion can be determined by a Von Neumann stability analysis, which analyzes the growth of an eigenmode perturbation for a certain finite difference approach. In case of an explicit 1-D finite difference approach, the heat diffusion stability criterion is defined as (assuming equal grid spacing):","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nDelta t  fracDelta x^22 kappa\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Thus, the maximum time step is limited by the model’s resolution. ","category":"page"},{"location":"man/DiffOneD/#Discretization","page":"1D","title":"Discretization","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"To numerically solve equation (3) one needs to discretize the numerical domain and assign the parameters to their corresponding nodes. Note: Even though the thermal conductivity is  assumed to be constant (for now), we chose a conservative gridding for the sake of continuity, that is the temperature T is defined on the centroids and the heat flux q in between. ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"(Image: 1DDiscretization)","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Figure 1. 1-D Discretization. Conservative finite difference grid to solve the 1-D conductive part of the temperature equation. The temperature is defined on the centroids and the heat flux on the vertices. The temperature ghost nodes are used to properly implement Dirichlet and Neumann thermal boundary conditions.  ","category":"page"},{"location":"man/DiffOneD/#Explicit,-*FTCS*-(or-Forward-Euler-Method)","page":"1D","title":"Explicit, FTCS (or Forward Euler Method)","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Using an FTCS explicit finite difference scheme to approximate the partial derivatives from equation (3) results in:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nfracT_i^n+1 - T_i^n Delta t = kappa fracT_i-1^n - 2T_i^n + T_i+1^nDeltax^2 + fracQ_i^nrho c_p\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where i is the horizontal index of the numerical finite difference grid, n is the time step index, Δt is the time step, and Δx the width of the grid in horizontal direction. Equation (5) contains know and unknow parameters and one can rearrange them to solve the equation for the unknowns as:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nT_i^n+1 = T_i^n + a left(T_i-1^n - 2T_i^n + T_i+1^n right) + fracQ_i^n Delta trho c_p \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where a = frackappa Delta tDeltax^2. Equation (6) can be solved iteratively for every centroid assuming initial and boundary coniditions are defined. For more details on how this is implemented see 1Dsolvers.jl.","category":"page"},{"location":"man/DiffOneD/#Boundary-Conditions","page":"1D","title":"Boundary Conditions","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Different thermal boundary conditions can be set for which we utilize the ghost nodes. Here, we focus on two fundamental conditions, the Dirichlet and Neumann boundary conditions. To consider each boundary condition to solve the equations, one needs to define the temperature at the ghost nodes. The Dirichlet boundary condition defines a constant temperature along the boundary, such that the temperatures at the left (west) and right (east) ghost nodes are defined as:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nT_GW = 2T_BCW - T_1\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nT_GE = 2T_BCE - T_nc\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where T_GW, T_GE and T_BCW, T_BCE are the temperature at the left and right ghost nodes and the constant temperatures at the left and right boundary, respectively, and nc is the number of centroids.  ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"The Neumann boundary condition defines that the variation of a certain parameter does not change across the boundary, that is, for example, the temperature across the boundary or thermal heat flux q through the boundary. The temperature at the ghost nodes is then defined as: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nT_GW = T_1 - c_W Deltax\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nT_GE = T_nc + c_E Deltax\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nleft c_W = fracpartialTpartialx rightvert_W textrmand left c_E = fracpartialTpartialx rightvert_E \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"are the constant temperature gradients across the left and right boundary, respectively. ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Now one can solve equation (6) for each centroid using the defined temperature at the ghost nodes for a certain boundary condition.","category":"page"},{"location":"man/DiffOneD/#Numerical-schemes","page":"1D","title":"Numerical schemes","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Within the example code Heat1Ddiscretization.jl different numerical schemes are used to solve the conductive part of the temperature equation (i.e., explicit, implicit, Crank-Nicholson Approach, and defection correction). In the following, we will briefly describe those well-know numerical schemes to solve the conductive part of the temperature equation and briefly discuss their advantages and disadvantages.","category":"page"},{"location":"man/DiffOneD/#Implicit,-FTCS-(or-Backward-Euler-Method)","page":"1D","title":"Implicit, FTCS (or Backward Euler Method)","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"The fully implicit finite difference scheme is unconditionally stable and one can use time steps larger than the diffusion stability criterion. In 1-D, the temperature equation is then given as: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nfracT_i^n+1-T_i^nDelta t = kappa fracT_i-1^n+1-2T_i^n+1+T_i+1^n+1Delta x^2 + fracQ_i^nrho c_p\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where n is the current and n+1 the next time step, Deltat is the time step length, Deltax is the horizontal grid spacing, and i is the horizontal index, respectively. Rearranging equation (12) into known and unknown variables, one obtains a linear system of equations in the form of: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\n-a T_i-1^n+1 + left(2a + b right) T_i^n+1 - a T_i+1^n+1 = b T_i^n + fracQ_i^nrho c_p\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where a = frackappaDeltax^2 and b = frac1Deltat. This is a linear system of equation in the form of boldsymbolAcdot x = rhs, where boldsymbolA is a coefficient matrix (here with three non-zero diagonals), x the unknown vector, and rhs the known right-hand side. We choose to distribute the coefficients in such a way and kept the time step on the right-hand side of the euqation to ensure that the coefficient matrix is the same as used in the defection correction method. ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"The main advantage of the implicit method is that there are no restrictions on the time step. However, this does not mean that it is more accurate. Taking too large time steps may result in an inaccurate solution for features with small spatial scales.","category":"page"},{"location":"man/DiffOneD/#Boundary-Conditions-2","page":"1D","title":"Boundary Conditions","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"The temperature on the ghost nodes to solve the equations on the centroids adjacent to the boundary are defined as before (equations (7)-(10) ). To obtain a symmetric coefficient matrix to solve the linear system of euqations, however, one needs to modify the coefficients for the centroids adjacent to the boundary and the corresponding right-hand side, such that the equations are defined as:  ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Dirichlet","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"West","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nleft(3 a + bright) T_1^n+1 - a T_2^n+1 = b T_1^n + 2 a T_BCW\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"East","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\n-a T_nc-1^n+1 + left(3 a + bright) T_nc^n+1  = b T_nc^n + 2 a T_BCE \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Neumann West","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nleft(a + bright) T_1^n+1 - a T_2^n+1 = b T_1^n - a c_W Deltax\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"East","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\n-a T_nc-1^n+1 + left(a + bright) T_nc^n+1  = b T_nc^n + a c_E Deltax \nendequation","category":"page"},{"location":"man/DiffOneD/#Defect-Correction-Method","page":"1D","title":"Defect Correction Method","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"The defection correction method is an iterative solution, in which the residual of the conductive part of the temperature equation for an initial temperature condition is reduced by a correction term. In case, the system is linear, one iteration is sufficient enough to optain the exact solution. ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Theory","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"The conductive part of the equation, in an implicit form, can be simplified to an equation in the form of: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nboldsymbolK cdot T - b = R \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where boldsymbolK is the coefficient matrix, T is the temperature at the new time step, b is a term containing the remaining variables (e.g., the current temperature and the radioactive heat source), and R is the resiual. Assuming an initial temperature guess T_i, the initial residual R_i is given by: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nR_i = boldsymbolK cdot T_i - b\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Adding a correction term deltaT to the initial guess, assuming that it results in zero residual, leads to: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\n0 = boldsymbolK left(T_i + deltaT right) - b = boldsymbolK T_i - b + boldsymbolK deltaT = R_i + boldsymbolK deltaT\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"which results in:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nR_i = -boldsymbolK deltaT \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"and finally the correction term: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\ndeltaT = -boldsymbolK^-1 R_i \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"The coefficients of the matrix can be derived, for example, via: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nfracpartialTpartialt - kappa fracpartial^2Tpartialx^2 = R \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nfracT_i^n+1-T_i^nDeltat - kappa fracT_i-1^n+1 - 2 T_i^n+1 + T_i+1^n+1Deltax^2 = R\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\n-a T_i-1^n+1 + left(2 a + b right) T_i^n+1 - a T_i+1^n+1 - b T_i^n = R \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\na = frackappaDeltax^2 textrmand  b = frac1Deltat \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Similar to the implicit FTCS method, one needs to adjust the coefficients for the centroids adjacent to the boundaries (see equations (14)-(17) ), however, no adjustment needs to be made on the right-hand side.","category":"page"},{"location":"man/DiffOneD/#Crank-Nicolson-approach-(CNA)","page":"1D","title":"Crank-Nicolson approach (CNA)","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"The fully implicit FTCS method works well, but is only first order accurate in time. A way to modify this is to employ a Crank-Nicolson time step discretization, which is implicit and, thus, second order accurate in time. In 1-D, equation (5) is then described as: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nfracT_i^n+1 - T_i^nDelta t = frackappa2frac(T_i-1^n+1-2T_i^n+1+T_i+1^n+1)+(T_i-1^n-2T_i^n+T_i+1^n)Delta x^2 \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Rearranging the parameters in knowns and unknows results in a linear system of equations as followed: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\n-aT_i-1^n+1 + left(b+2aright)T_i^n+1 - a T_i+1^n+1 = aT_i-1^n + left(b-2aright)T_i^n + a T_i+1^n\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where a = frackappa2Deltax^2 and b = frac1Deltat. ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Similar to the implicit FTCS method, we need to modify the coefficients of the matrix and the right-hand side using different boundary conditions to obtain a symmetric coefficient matrix. Thus, the equations for the centroids adjacent to the boundaries are defined as: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Dirichlet West","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nleft(b + 3 a right) T_1^n+1 - a T_2^n+1 = left( b - 3 a right) T_1^n + a T_2^n + 4 a T_BCW\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"East","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\n-a T_nc-1^n+1 + left(b + 3 a right) T_nc^n+1 = a T_nc-1^n + left( b - 3 a right) T_nc^n + 4 a T_BCE\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Neumann","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"West","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nleft(b+aright)T_1^n+1 - a T_2^n+1 = left(b-aright)T_1^n + a T_2 - 2ac_W Deltax\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"East","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\n-a T_nc-1^n+1 + left(b+aright)T_nc^n+1  = a T_nc-1^n + left(b-aright)T_nc^n + 2ac_E Deltax\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"However, the band-width of the coefficient matrix increases as in the fully implicit case. Thus, the method becomes memory intensiv for models with a high resoltuion. For more details on how this is implemented, see 1Dsolvers.jl.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"For the explicit solver and the defection correction method, we need the extended temperature field, which includes the ghost nodes, to solve the temperature equation. Thereby, we assign the current temperature field to the centroids of the extended field to use it as the old temperature and calculate the temperature at the new time step. For the remaining solvers, we assign the current temperature to the known righ-hand side vector, collect the coefficients for each matrix and solve for the unknown temperature. ","category":"page"},{"location":"man/DiffOneD/#Examples","page":"1D","title":"Examples","text":"","category":"section"},{"location":"man/DiffOneD/#Gaussian-Diffusion-([Heat*1D*discretization.jl](https://github.com/LukasFuchs/GeoModBox.jl/blob/main/examples/DiffusionEquation/1D/Heat_1D_discretization.jl))","page":"1D","title":"Gaussian Diffusion (Heat1Ddiscretization.jl)","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"(Image: GaussianDiffusion)","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Figure .... Diffusion of an initial Gaussian temperature distribution.... ","category":"page"},{"location":"man/DiffOneD/#Geotherms","page":"1D","title":"Geotherms","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"The 1-D temperature profiles of a geotherm are calculated by solving the conductive part of the 1-D temperature equation (so far only including a radiogenic heat source) for variable thermal parameters with a proper conserving finite difference scheme. That is, the heat flow is calculated on the vertices and the temperature is defined on the centroids, respectively. The discretization scheme for variable thermal parameters is choosen to solve for a temperature profile of a continental lithosphere with upper, lower crust, and mantle. The 1-D temperature equation is given by: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nrho c_p fracpartialTpartialt = fracpartialpartialyleft(k fracpartialTpartialyright) + rho H\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where rho c_p T t k H and y are the density [kg/m<sup>3</sup>], the specific heat capacity [J/kg/K], the temperature [K], the time [s], the thermal conductivity [W/m/K], the heat generation rate per mass [W/kg], and the depth [m] respectively. For values and references of the given thermal parameters see OceanicGeotherm_1D.jl and ContinentalGeotherm_1D.jl.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"A proper conservative finite difference scheme means that the 1-D vertical heat flux and the thermal conductivity k are defined on the vertices and q is defined as:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nleft q_ym = -k_m fracpartial Tpartial yrightvert_m textrmfor m = 1nv \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where nv is the number of vertices. ","category":"page"},{"location":"man/DiffOneD/#***Solving-the-equation***","page":"1D","title":"***Solving the equation***","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"&emsp;Following the discretization as described above, one needs to solve the following equation for each centroid (in an explicit finite difference formulation):","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nrho_j c_pj fracT_j^n+1 - T_j^nDeltat = -fracq_yj+1^n - q_yj^n Deltay + rho_j H_j textrmfor j = 1nc \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where T is defined on the centroids, q and k are defined on the vertices, Deltat is the time step length, and Deltay is the grid resolution. Further replacing q results in: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nrho_j c_pj fracT_j^n+1 - T_j^nDeltat = frac k_j+1 fracT_j+1^n - T_j^nDeltay - k_j fracT_j^n - T_j-1^nDeltay Deltay + rho_j H_j\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Sorting the variables (known variables on the right-hand side, unknown on the left-hand side) results in: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nT_j^n+1 = ak_jT_j-1^n + left(1-aleft(k_j+1+k_jright)right)T_j^n + ak_j+1T_j+1^n + fracH_jDeltatc_pj\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"For the centroids adjacent to the boundaries one needs to use the ghost nodes and their correspondingly calculated temperatures, depending on the choosen thermal boundary condition (see equations (7)-(10)).","category":"page"},{"location":"man/DiffOneD/#Oceanic","page":"1D","title":"Oceanic","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"(Image: OceanicGeotherm)","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Figure ... ... ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"(Image: OceanicGeothermII)","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Figure .... Oceanic Lithosphere. LEFT: Temperature profile [K]  for an oceanic lithosphere of 60 Ma of age and constant thermal boundary conditions at the top and bottom. The blue line shows the initial temperature profile. The yellow dashed line shows the solution for a half-space cooling model. RIGHT: Heat flux q<sub>y</sub> [mW/m<sup>2</sup>] with depth. The parameters of this model are defined as the default values in the routine OceanicGeotherm_1D.jl. ","category":"page"},{"location":"man/DiffOneD/#Continental","page":"1D","title":"Continental","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"(Image: ContinentalGeotherm)","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Figure ... ... ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"(Image: ContinentalGeothermII)","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Figure .... Continental Lithosphere. LEFT: Temperature profile for a continental lithosphere of 1000 Ma of age with constant upper and lower thermal boundary conditions. MIDDLE: Heat flux with depth. RIGHT: Thermal parameter for the lithosphere setup: thermal conductivity [k], specific heat [c<sub>p</sub>], density [ρ], and volumetric heat generation rate [Q]. ","category":"page"},{"location":"man/DiffOneD/#Directory-Content","page":"1D","title":"Directory Content","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Heat1Ddiscretization.jl","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"-> Solving the time-dependent diffusion of an initial Gaussian temperature distribution using different numerical finite difference schemes and comparing the results with the analytical solution.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"OceanicGeotherm_1D.jl","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"-> Script to calculate the 1-D oceanic geotherm.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"ContinentalGeotherm_1D.jl","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"-> Script to calculate the 1-D continental geotherm.","category":"page"}]
}
