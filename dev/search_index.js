var documenterSearchIndex = {"docs":
[{"location":"man/DiffMain/#Energy-Conservation-Equation","page":"General","title":"Energy Conservation Equation","text":"","category":"section"},{"location":"man/DiffMain/","page":"General","title":"General","text":"The conservation of energy is a fundamental principle in physics and defines that the loss and generation of energy needs to be equal within a closed system. In terms of a geodynamical problem, energy is described by temperature, which is transported mainly through conductive and convective processes, such that a general energy equation is defined as followed (assuming only radioactive heat sources):","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"beginequation\nleft(fracpartial Epartial t + overrightharpoonv cdot overrightharpoonnabla Eright) + fracpartial q_ipartial x_i = rho H\nendequation","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"where the energy is described as E=c_p rho T, and c_p is the specific heat capacity [ JkgK ], rho is a reference density [ kgm^3 ], T is the temperature [ K ], t is the time [ s ], overrightharpoonv is the velocity vector [ ms ], q_i is the heat flux in direction of i [ Wm^2 ], fracpartialpartialx_i is a directional derivative in direction of i, and H the heat production rate per mass [ Wkg ]. The repeated index means a summation of derivatives. This conservation law contains the variation of the heat flux in a certain direction, where the heat flux is defined by the Fourier’s law as followed: ","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"beginequation\noverrightharpoonq = - k overrightharpoonnabla T\nendequation","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"where k is the thermal conductivity [ WmK ]. The heat flux is the amount of heat that passes through a unit surface area, per unit time and is positive in the direction of decreasing temperature, that is in the case when the temperature gradient is negative. The temperature conservation equation, or temperature equation, in an Eulerian form can then be written as: ","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"beginequation\nrho c_p left(fracpartial Tpartial t + overrightharpoonv cdot overrightharpoonnabla Tright) = -fracpartial q_ipartial x_i + rho H\nendequation","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"This form of the temperature equation describes the variation of temperature due to a conductive (right hand side of the equation) and convective (left hand side of the equation) process. For a matter of simplicity, one can consider those terms in a separate manner and solve the temperature equation using an operator splitting method, that is one first solves the convective part, followed by the conductive part.","category":"page"},{"location":"man/DiffMain/#Heat-Diffusion-Equation","page":"General","title":"Heat Diffusion Equation","text":"","category":"section"},{"location":"man/DiffMain/","page":"General","title":"General","text":"The GeoModBox.jl provides different finite difference (FD) schemes to solve the diffusive part of the time-dependent or steady-state temperature equation including radioactive heating, in 1-D and 2-D. The solvers include: ","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"forward Euler, \nbackward Euler, \nCrank-Nicholson approach, and \nAlternate Direct Implicit (ADI).","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"For more details regarding each FD-scheme see the documentation of the 1-D and 2-D solvers, respectively. Currently, only Dirichlet and Neumann thermal boundary conditions are available and most functions assume constant thermal parameters (except for the 1-D and some 2-D solvers). For more details on the implementation of the solvers see the src/HeatEquation directory. ","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"The examples of solving the heat diffusion equation include, amongst others: ","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"the determination of an oceanic and continental 1-D geotherm profile, \na comparison of the different FD-schemes applied on a 1-D gaussian temperature anomaly, \na 2-D resolution test for each FD-scheme using a gaussian temperature anomaly, and\na resolution test for a 2-D poisson problem. ","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"For detailed information and explenations of the examples see the documentation and for additional examples see the example directory.","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"The exercises include","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"the forward and backward Euler method to solve the 1-D diffusion equation, \na 2-D poisson problem, and\na time-dependent temperature distribution within the lithosphere assuming a plume or sill.","category":"page"},{"location":"man/DiffMain/#Heat-Advection-Equation","page":"General","title":"Heat Advection Equation","text":"","category":"section"},{"location":"man/DiffMain/","page":"General","title":"General","text":"To solve the advective part of the temperature equation, the GeoModBox.jl provides the following different methods: ","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"the upwind scheme,\nthe staggered-leaped frog scheme, \nthe semi-lagrangian advection scheme, and\npassive tracers/markers. ","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"For more details regarding each advection scheme see the documentation. The routines are structured in such a way, that any property can be advected with the first three advection methods listed above, as long as the property is defined on the centroids including ghost nodes on all boundaries. The velocity to advect the property also needs to be defined at the centroids. Using passive tracers, one can, so far, choose to either advect the (absolut) temperature or the phase ID. In case of advecting the phase ID, one must define a certain rheology (eta) and/or density (rho) associated to each phase. The phase ID is used to interpolate the corresponding property from the tracers to the centroids or the vertices (e.g., in the case of the viscosity). The tracers can be initialized with a certain random perturbation for their initial position and are advected using Runge-Kutta 4th order. For the tracer advection one can use the staggered velocity grid. ","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"For more details on the implementation of the tracer advection see here or here. The solvers for the tracer advection method are located in src/Tracers, where the remaining advection routines are located in src/AdvectionEquation. ","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"A key aspect for the advection is the amplitude and the shape of an advected property. For example, in case of a rigid body rotation, none of them should change. Depending on the method, however, numerical diffusion or interpolation effects can lead to strong deviations. Thus, care needs to be taken with respect to solving the advection equation. ","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"The GeoModBox.jl contains several routines to setup a certain initial anomaly, either for properties defined on their correspondig grid (i.e., temperature, velocity, or phase) or for tracers. Within the examples and the exercise one can choose different initial temperature and velocity conditions. See here for a more detailed explenation of the initial condition setup. ","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"The examples for a two dimensional advection problem include:","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"a 2-D advection, assuming a constant velocity field (e.g., a rigid body rotation), and\na resolution test of the same advection example. ","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"For detailed information and explenations of the examples see the documentation.","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"The exercises include a","category":"page"},{"location":"man/DiffMain/","page":"General","title":"General","text":"1-D advection of a gaussian or block anomaly, and\na 2-D advection coupled with the solution of the diffusion equation.","category":"page"},{"location":"man/MomentumTwoD/#Stokes-Equation-(2D)","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"","category":"section"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"The Stokes equation (the conservation equation of momentum) in two dimensions is defined as: ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\n0 = -fracpartialPpartialx_i + fracpartialpartialx_jtau_ij + rho cdot g_i \nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"where P is the total pressure,  rho is the density, g_i the gravitational acceleration, fracpartialpartialx_i the spatial derivative in the direction of x_i, and tau_ij is the deviatoric stress tensor and defined as: ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\ntau_ij = 2eta dotvarepsilon_ij\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"The conservation equation of mass is defined as: ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\ndivleft(overrightharpoonv right) = left(fracpartialv_ipartialx_i+fracpartialv_jpartialx_jright) = 0 \nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"where v_i is the velocity in the i-th direction. ","category":"page"},{"location":"man/MomentumTwoD/#Discretization","page":"Stokes Equation (2D)","title":"Discretization","text":"","category":"section"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"The conservation equations of momentum and mass are solved properly in two dimensions (x and y) using a staggered finite difference grid, where the horizontal (cyan dashes) and vertical (orange dashes) velocities are defined inbetween the regular grid points or vertices, and the pressure (red circles) within a finite difference cells or centroids (Figure 1). A staggered grid enables the conservation of the stress between adjacent grid points and one can solve equations (1) and (3) for the unknows.  ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"(Image: MomentumGrid)","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"Figure 1. Staggered finite difference grid. Discretization of the conservation equations of momemtum and mass. The horizontal and vertical velocities require ghost nodes at the North and South and East and West boundary, respectively. <!– What about the pressure ghost nodes? Are they even necessary? –>","category":"page"},{"location":"man/MomentumTwoD/#Constant-Viscosity","page":"Stokes Equation (2D)","title":"Constant Viscosity","text":"","category":"section"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"Let's first assume a special case of the Stokes equation, a constant viscosity, which simplifies equation (1) to: ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\n0 = -fracpartialPpartialx_i + 2etafracpartial^2v_ipartialx_i^2 + etaleft(fracpartial^2v_ipartialx_j^2+fracpartial^2v_jpartialx_i^2right) + rho cdot g_i \nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"Using equation (3) and neglecting a horizontal graviational acceleration, equation (4) can further be simplified to: ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"x-component ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\n-fracpartialPpartialx + etafracpartial^2v_xpartialx^2 + etafracpartial^2v_xpartialy^2 = 0 \nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"y-component","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\n-fracpartialPpartialy + etafracpartial^2v_ypartialy^2 + etafracpartial^2v_ypartialx^2 = - rho g_y \nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"For each equation, one can define a so-called numerical stencil which highlights the position of the required parameters with respect to the central point (ij), where i and j are the indices in the horizontal and vertical direction, respectively. The central point corresponds to the number of the equation in the linear system of equations. ","category":"page"},{"location":"man/MomentumTwoD/#Stencil","page":"Stokes Equation (2D)","title":"Stencil","text":"","category":"section"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"The stencils for the momentum equation assuming a constant viscosity shows the points required to solve the equations for each component of the momentum equation using the finite difference approach (Figure 2). ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"(Image: StencilConstEta)","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"Figure 2. Numerical stencils for the momentum equation. a) x-component. b) y-component.","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"Using the finite difference operators, equations (5) and (6) are defined as: ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"x-component","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\n-fracP_ij-P_i-1jDeltax + etafracv_x(i-1j)-2v_x(ij)+v_x(i+1j)Deltax^2 + etafracv_x(ij-1)-2v_x(ij)+v_x(ij+1)Deltay^2 = 0\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nP_CP_ij + P_WP_i-1j + Sv_x(ij-1) +  Wv_x(i-1j) + Cv_x(ij) + E v_x(i+1j) + N v_x(ij+1) = 0 \nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"where ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nbeginsplit\nP_C = -frac1Deltax  \nP_W = frac1Deltax \nS = fracetaDeltay^2 \nW = fracetaDeltax^2 \nC = -2etaleft(frac1Deltax^2+frac1Deltay^2right) \nE = fracetaDeltax^2 \nN = fracetaDeltay^2 \nendsplit\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"y-component","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\n-fracP_ij-P_ij-1Deltay + etafracv_y(ij-1)-2v_y(ij)+v_x(ij+1)Deltay^2 + etafracv_y(i-1j)-2v_y(ij)+v_y(i+1j)Deltax^2 = -fracrho_ij+rho_i+1j2 g_y\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nP_SP_ij-1 + P_CP_ij + Sv_y(ij-1) + Wv_y(i-1j) + Cv_y(ij) + E v_y(i+1j) + N v_y(ij+1) = -fracrho_ij+rho_i+1j2 g_y \nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"where ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nbeginsplit\nP_S = frac1Deltay  \nP_C = -frac1Deltay \nS = fracetaDeltay^2 \nW = fracetaDeltax^2 \nC = -2etaleft(frac1Deltax^2+frac1Deltay^2right) \nE = fracetaDeltax^2 \nN = fracetaDeltay^2 \nendsplit\nendequation","category":"page"},{"location":"man/MomentumTwoD/#Boundary-Conditions","page":"Stokes Equation (2D)","title":"Boundary Conditions","text":"","category":"section"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"The most common boundary conditions for the momentum equation are a combination of Dirichlet and Neumann velocity boundary conditions: free slip and no slip boundary condition. ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"Free slip ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"Free slip boundary conditions allow the fluid to move along the boundary assuming no shear stress and no orthogonal velocity along the boundary. That is for the lateral boundaries (E, W) the conditions are: ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nbeginsplit\nv_x = 0 \nfracpartialv_ypartialx=0\nendsplit\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"and for the horizontal bounaries (N, S) the conditions are: ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nbeginsplit\nv_y = 0 \nfracpartialv_xpartialy=0\nendsplit\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"Solving the system of equations using a direct solution, one needs to modify the coefficients of the required points adjacent to the boundaries using the velocities defined at the ghost nodes and the right-hand side. ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"x-component","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"For free slip boundary conditions one needs to define the horizontal velocity v_x for the ghost nodes at the upper (N) and lower (S) boundary which are defined as (see equation (14) ): ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"South (j = 1)","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nv_x(iGS) = v_x(i1)\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"North (j = ncy)","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nv_x(iGN) = v_x(incy)\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"Along the lateral boundaries (E, W) we can simply set the velocities to zero (see equation (13) ).","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"y-component","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"For the vertical velocity v_y one needs to define the velocity at the ghost nodes for the left (W) and right (E) boundary as (see equation (13) ): ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"West (i = 1)","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nv_y(GWj) = v_y(1j)\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"East (i = ncx)","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nv_y(GEj) = v_y(ncxj)\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"Along the horizontal boundaries (N, S), we can simply set the velocity v_y to zero (see equation (14) ). ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"Using the equations (15) - (18) the coefficients of the equations adjacent to the corresponding boundaries changes (the right-hand side actually does not change for free slip boundary conditions) to: ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"x-component ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"South (j = 1)","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nP_WP_i-1j+P_CP_ij+Wv_x(i-1j)+Cv_x(ij)+Ev_x(i+1j)+Nv_x(ij+1) = 0\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"where C = -frac2etaDeltax^2-fracetaDeltay^2.","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"North (j = ncy)","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nP_WP_i-1j+P_CP_ij+Sv_x(ij-1)+Wv_x(i-1j)+Cv_x(ij)+Ev_x(i+1j) = 0\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"where C = -frac2etaDeltax^2-fracetaDeltay^2.","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"Along the lateral boundaries (E, W), C=1 and the remaining coefficients are equal to zero.","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"y-component ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"West (i = 1)","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nP_SP_ij-1+P_CP_ij+Sv_y(ij-1)+Cv_y(ij)+Ev_y(i+1j)+Nv_y(ij+1) = -fracrho_ij+rho_i+1j2 g_y\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"where C = -fracetaDeltax^2-frac2etaDeltay^2.","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"East (i = ncx)","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nP_SP_ij-1+P_CP_ij+Sv_y(ij-1)+Wv_y(i-1j)+Cv_y(ij)+Nv_y(ij+1) = -fracrho_ij+rho_i+1j2 g_y\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"where C = -fracetaDeltax^2-frac2etaDeltay^2.","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"Along the horizontal boundaries (N, S), C=1 and the remaining coefficients are equal to zero.","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"No slip ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"No slip boundary conditions fix the fluid along the boundary and set the horizontal and vertical velocity equal to zero.. ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"That is, for all boundaries (E, W, S, N) the conditions are: ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nbeginsplit\nv_x = 0 \nv_y = 0\nendsplit\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"x-component","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"One needs the velocity at the ghost nodes for the horizontal velocity at the lower (S) and upper (N) boundary which are defined as: ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"South (j = 1)","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nv_x(iGS) = 2V_BCS - v_x(i1)\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"where V_BCS is the velocity along the boundary (here 0).","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"North (j = ncy)","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nv_x(iGN) = 2V_BCN - v_x(incy)\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"where V_BCN is the velocity along the boundary (here 0). ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"Along the lateral boundaries (E, W) we can simply set the velocity to zero (as in the free slip case). ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"y-component ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"For the vertical velocity one needs to define the velocity at the ghost nodes for the left (W) and right (E) boundary as: ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"West (i = 1)","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nv_y(GWj) = 2V_BCW - v_y(1j)\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"where V_BCW is the velocity along the boundary (here 0).","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"East (i = ncx)","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nv_y(GEj) = 2V_BCE - v_y(ncxj)\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"where V_BCE is the velocity along the boundary (here 0). ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"Along the horizontal boundaries (N, S), we can simply set the velocity to zero (as in the free slip case). ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"Using the equations (24) - (27) the coefficients of the equations adjacent to the corresponding boundaries and the right-hand side changes to: ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"x-component ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"South (j = 1)","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nP_WP_i-1j+P_CP_ij+Wv_x(i-1j)+Cv_x(ij)+Ev_x(i+1j)+Nv_x(ij+1) = -2fracetaDeltay^2V_BCS\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"where C = -frac2etaDeltax^2-frac3etaDeltay^2.","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"North (j = ncy)","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nP_WP_i-1j+P_CP_ij+Sv_x(ij-1)+Wv_x(i-1j)+Cv_x(ij)+Ev_x(i+1j) = -2fracetaDeltay^2V_BCN\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"where C = -frac2etaDeltax^2-frac3etaDeltay^2.","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"Along the lateral boundaries (E, W), C=1 and the remaining coefficients and the right-hand side are equal to zero.","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"y-component ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"West (i = 1)","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nP_SP_ij-1+P_CP_ij+Sv_y(ij-1)+Cv_y(ij)+Ev_y(i+1j)+Nv_y(ij+1) = -fracrho_ij + rho_i+1j2 g_y - 2fracetaDeltax^2V_BCW\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"where C = -frac3etaDeltax^2-frac2etaDeltay^2.","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"East (i = ncx)","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nP_SP_ij-1+P_CP_ij+Sv_y(ij-1)+Wv_y(i-1j)+Cv_y(ij)+Nv_y(ij+1) = -fracrho_ij + rho_i+1j2 g_y - 2fracetaDeltax^2V_BCW\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"where C = -frac3etaDeltax^2-frac2etaDeltay^2.","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"Along the horizontal boundaries (E, W), C=1 and the remaining coefficients and the right-hand side are equal to zero.","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"","category":"page"},{"location":"man/MomentumTwoD/#Variable-Viscosity","page":"Stokes Equation (2D)","title":"Variable Viscosity","text":"","category":"section"},{"location":"man/MomentumTwoD/#Stencil-2","page":"Stokes Equation (2D)","title":"Stencil","text":"","category":"section"},{"location":"man/MomentumTwoD/#Boundary-Conditions-2","page":"Stokes Equation (2D)","title":"Boundary Conditions","text":"","category":"section"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"","category":"page"},{"location":"man/MomentumTwoD/#Continuum-Equation","page":"Stokes Equation (2D)","title":"Continuum Equation","text":"","category":"section"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"The continuum equation provides a third equation helping to solve for the third unknown P. ","category":"page"},{"location":"man/MomentumTwoD/#Stencil-3","page":"Stokes Equation (2D)","title":"Stencil","text":"","category":"section"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"The corresponding numerical stencil only includes the horizontal and vertical velocities (Fig. 3).","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"(Image: StencilContinuum)","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"Figure 3. Numerical stencil for the continuum equation. ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"Using the finite difference operators equations (3) is defined as: ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nfracv_x(i+1j)-v_x(ij)Deltax + fracv_y(ij+1)-v_y(ij)Deltay = 0\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nC_xv_x(ij) + E_xv_x(i+1j) + C_yv_y(ij) + N_yv_y(ij+1) = 0\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"where ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nbeginsplit\n-C_x = E_x = frac1Deltax \n-C_y = N_y = frac1Deltay\nendsplit\nendequation","category":"page"},{"location":"man/MomentumTwoD/#Solution","page":"Stokes Equation (2D)","title":"Solution","text":"","category":"section"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"To solve the linear system of equations, one needs to collect the coefficients for the coefficient matrix boldK and set up the righ-hand side overrightharpoonrhs (at least for the direct solution). ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"To set up the coefficient matrix boldK, one needs to use a consecutive numbering for each unknown variable node, corresponding to one equation. Here, we first the number the equations of each corresponding central reference point (ij) for the x-component of the momentum equation (that is for the unknown v_x), followed by its y-component (the unknown v_y), and at last the equations of the conservation of mass (for the unknown P). The numbering for each equation is then defined as: ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"x-compnent (v_x) ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nii_x = 1 textrm-- left(nv_x cdot nc_yright)\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"y-component (v_y)","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nii_y = left(nv_x cdot nc_y + 1 right) textrm-- left(nv_x cdot nc_y + nc_x cdot nv_yright)\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"conituum equation (P)","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nii_p = left(nv_x cdot nc_y + nc_x cdot nv_y + 1right) textrm-- left(nv_x cdot nc_y + nc_x cdot nv_y + nc_x cdot nc_yright)\nendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"where nc_i and nv_i are the numbers of centroids and vertices in the i-th direction, respectively. ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"Each line (ii) of the coefficient matrix boldK belongs to an equation, where the coefficients Kii_ji_k for the unknown variable points in the numerical stencils (Fig. 2) are located in the corresponding columns of each line (relative to the central point leftii_ji_cright): ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"x-component","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequationbeginsplit\ni_S = ii_x - nv_x \ni_W = ii_x - 1 \ni_C = ii_x \ni_E = ii_x + 1 \ni_N = ii_x + nv_x \nendsplitendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"y-component","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequationbeginsplit\ni_S = ii_y - nc_x \ni_W = ii_y - 1 \ni_C = ii_y \ni_E = ii_y + 1 \ni_N = ii_y + nc_x \nendsplitendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"continuum (P)","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequationbeginsplit\ni_S = ii_y \ni_W = ii_x \ni_C = ii_p \ni_E = ii_x + 1 \ni_N = ii_y + nc_x \nendsplitendequation","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"This results in a coefficient matrix boldKii_ji_k in the form of: ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"(Image: CoefficientMatrix)","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"Figure 4. Coefficient matrix. Non-zero entries of a coefficient matrix for a resolution of nc_x=nc_y=10 and a constant viscosity. Highlighted are the areas for the different equations: v_x - x-component of the momentum equation, v_y - y-component of the momentum equation, P - continuum equation. ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"The right-hand side vector overrightharpoonrhs is given by the boundary and initial conditions (see equations (13) - (31) ). ","category":"page"},{"location":"man/MomentumTwoD/#Direct","page":"Stokes Equation (2D)","title":"Direct","text":"","category":"section"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"Using a direct solution method, one simply needs to do a right division of the coefficient matrix by the right-hand side to obtain the solution vector: ","category":"page"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"beginequation\nboldK backslash overrightharpoonrhs = overrightharpoonx\nendequation","category":"page"},{"location":"man/MomentumTwoD/#Defect-Correction","page":"Stokes Equation (2D)","title":"Defect Correction","text":"","category":"section"},{"location":"man/MomentumTwoD/","page":"Stokes Equation (2D)","title":"Stokes Equation (2D)","text":"","category":"page"},{"location":"man/DiffTwoD/#Temperature-Equation-(2D)","page":"2D","title":"Temperature Equation (2D)","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"In two dimesions (x and y), the conductive part of the temperature equation is described by (assuming only radiogenic heating):","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nrho c_p fracpartial Tpartial t = -fracpartial q_xpartial x -fracpartial q_ypartial y + rho H \nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"or including Fourier’s law (assuming variable thermal parameters):","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nrho c_p fracpartial Tpartial t = fracpartialpartial x k fracpartial Tpartial x + fracpartialpartial y k fracpartial Tpartial y + rho H\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Assuming that the thermal parameters are constant, equation (2) simplifies to: ","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nfracpartial Tpartial t = kappa left(fracpartial^2 Tpartial x^2 + fracpartial^2 Tpartial y^2right) + fracQrho c_p\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"where kappa = krho c_p is the thermal diffusivity [ m^2 ] and Q=rho H is the heat production rate per volume [ Wm^3 ]. In case of an explicit 2-D finite difference approach, the heat diffusion stability criterion is defined as ","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nDeltat  frac12 kappa left(frac1Deltax^2+frac1Deltay^2right)\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"(assuming equal grid spacing in x- and y-direction).","category":"page"},{"location":"man/DiffTwoD/#Discretization","page":"2D","title":"Discretization","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"To numerically solve equation (3) one needs to discretize the numerical domain and assign the parameters to their corresponding nodes. ","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"(Image: 2DDiffusionGrid)","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Figure 1. 2-D Discretization. Conservative finite difference grid to solve the 2-D conductive part of the temperature equation. The temperature is defined on the centroids (red circles) and the heat flux between the vertices (horizontal - blue x, vertical - green square). The temperature ghost nodes (grey circles) are used to properly implement Dirichlet and Neumann thermal boundary conditions.  ","category":"page"},{"location":"man/DiffTwoD/#Explicit,-FTCS-(or-Forward-Euler-Method)","page":"2D","title":"Explicit, FTCS (or Forward Euler Method)","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"In two dimensions, the partial derivatives of equation (3) can be approximated by an explicit FTCS finite difference approach by: ","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nfracT_ij^n+1 - T_ij^n Delta t = kappa left( fracT_i-1j^n - 2T_ij^n + T_i+1j^nDeltax^2 + fracT_ij-1^n - 2T_ij^n + T_ij+1^nDeltaz^2 right) + fracQ_ij^nrho c_p\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"where i and j are the horizontal and vertical index of the numerical finite difference grid, n is the time step index, Deltat is the time step, and Deltax and Deltay are the horizontal and vertical grid resolution, respectively. Equation (5) contains know and unknow parameters and one can rearrange them to solve the equation for the unknowns as:","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nT_ij^n+1 = T_ij^n + aleft(T_i-1j^n - 2T_ij^n + T_i+1j^nright) + bleft(T_ij-1^n - 2T_ij^n + T_ij+1^nright) + fracQ_ij^n Deltatrho c_p \nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"where a = frackappa DeltatDeltax^2 and b = frackappa DeltatDeltay^2. For more details on how this is implemented see ForwardEuler.jl.","category":"page"},{"location":"man/DiffTwoD/#Boundary-Conditions","page":"2D","title":"Boundary Conditions","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"The Dirichlet boundary condition defines a constant temperature along the boundary, such that the temperatures at the left (West), right (East), bottom (South), and top (North) ghost nodes are defined as:","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nT_GW = 2T_BCW - T_1\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nT_GE = 2T_BCE - T_ncx\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nT_GS = 2T_BCS - T_1\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nT_GN = 2T_BCN - T_ncy\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"where T_GW, T_GE, T_GS, and T_GN and T_BCW, T_BCE, T_BCS, and T_BCN are the temperature at the left, right, bottom, and top ghost nodes and the constant temperatures at the left, right, bottom, and top boundary, respectively. ","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"The Neumann boundary condition defines that the variation of a certain parameter across the boundary is defined, that is, for example, the temperature across the boundary or thermal heat flux q through the boundary. The temperature at the ghost nodes is then defined as: ","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nT_GW = T_1 - c_W Deltax\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nT_GE = T_ncx + c_E Deltax\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nT_GS = T_1 - c_S Deltay\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nT_GN = T_ncy + c_N Deltay\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"where ","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nleft c_W = fracpartialTpartialx rightvert_W left c_E = fracpartialTpartialx rightvert_E \nleft c_S = fracpartialTpartialy rightvert_S\nleft c_N = fracpartialTpartialy rightvert_N\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"are the constant heat fluxes along the left, right, bottom, and top boundary, respectively. ","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Now, one can solve equation (6) for the temperature on the centroids at the next time step using the defined temperature at the ghost nodes where necessary.  ","category":"page"},{"location":"man/DiffTwoD/#Numerical-Schemes","page":"2D","title":"Numerical Schemes","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Within the example code Gaussian_Diffusion.jl different numerical schemes are used to solve the conductive part of the temperature equation (i.e., explicit, implicit, Crank-Nicholson Approach, and defection correction) and the results are compared with the analytical solution. In the following, each discretization scheme is briefly described. ","category":"page"},{"location":"man/DiffTwoD/#Implicit-(or-Backward-Euler-Method)","page":"2D","title":"Implicit (or Backward Euler Method)","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"In 2-D, the temperature equation is then given as: ","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nfracT_ij^n+1-T_ij^nDelta t = \nkappa left( \n    fracT_i-1j^n+1-2T_ij^n+1+T_i+1j^n+1Delta x^2 + \n    fracT_ij-1^n+1-2T_ij^n+1+T_ij+1^n+1Delta y^2 \n    right) + \nfracQ_i^nrho c_p\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"where n is the current and n+1 the next time step, Deltat is the time step length, Deltax and Deltay are the horizontal and vertical grid spacing, and i and j are the horizontal and vertical indeces, respectively. Rearranging equation (16) into known and unknown variables, one obtains a linear system of equations in the form of: ","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n-b T_ij-1^n+1 - a T_i-1j^n+1 + \nleft(2a + 2b + c right) T_ij^n+1 - \na T_i+1j^n+1 - b T_ij+1^n+1 = \nc T_ij^n + fracQ_ij^nrho c_p\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"where a = frackappaDeltax^2, b = frackappaDeltay^2, and c = frac1Deltat. ","category":"page"},{"location":"man/DiffTwoD/#Boundary-Conditions-2","page":"2D","title":"Boundary Conditions","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"The temperature on the ghost nodes to solve the equations on the centroids adjacent to the boundary are defined as before (equations (7)-(14) ). To obtain a symmetric coefficient matrix to solve the linear system of euqations, however, one needs to modify the coefficients of the centroids adjacent to the boundary and the corresponding right-hand side, such that the equations are defined as:  ","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Dirichlet","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"West (i=1)","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n-b T_1j-1^n+1 + left(3 a + 2b + cright) T_1j^n+1 - a T_2j^n+1  - b T_1j+1^n+1 = c T_1j^n + 2 a T_BCW + fracQ_ijrho c_p \nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"East (i = ncx)","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n-b T_ncxj-1^n+1 - aT_ncx-1j^n+1 + left(3 a + 2b + cright) T_ncxj^n+1 - b T_ncxj+1^n+1 = \nc T_ncxj^n + 2 a T_BCE + fracQ_ijrho c_p \nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"South (j = 1)","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n-a T_i-11^n+1 + left(2a + 3b + cright) T_i1^n+1 - a T_i+11^n+1 - bT_i2^n+1 = \nc T_i1^n + 2 b T_BCS + fracQ_ijrho c_p \nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"North (j = ncy)","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n-b T_incy^n+1 - aT_i-1ncy^n+1 + left(2a + 3b + cright) T_incy^n+1 - a T_i+1ncy^n+1 = \nc T_incy^n + 2 b T_BCN + fracQ_ijrho c_p \nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Neumann","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"West (i=1)","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n-b T_1j-1^n+1 + left(a + 2b + cright) T_1j^n+1 - a T_2j^n+1  - b T_1j+1^n+1 = \nc T_1j^n - a c_W Deltax + fracQ_ijrho c_p \nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"East (i = ncx)","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n-b T_ncxj-1^n+1 - aT_ncx-1j^n+1 + left(a + 2b + cright) T_ncxj^n+1 - b T_ncxj+1^n+1 = \nc T_ncxj^n + a c_E Deltax + fracQ_ijrho c_p \nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"South (j = 1)","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n-a T_i-11^n+1 + left(2a + b + cright) T_i1^n+1 - a T_i+11^n+1 - bT_i2^n+1 = \nc T_i1^n - b c_S Deltay + fracQ_ijrho c_p \nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"North (j = ncy)","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n-b T_incy^n+1 - aT_i-1ncy^n+1 + left(2a + b + cright) T_incy^n+1 - a T_i+1ncy^n+1 = \nc T_incy^n + b c_N Deltay + fracQ_ijrho c_p \nendequation","category":"page"},{"location":"man/DiffTwoD/#Defection-Correction-Method","page":"2D","title":"Defection Correction Method","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"The coefficients of the matrix can be derived, for example, via: ","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nfracpartialTpartialt - kappa left( fracpartial^2Tpartialx^2 + fracpartial^2Tpartialy^2 right) - fracQ_ij^nrho c_p = R \nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nfracT_i^n+1-T_i^nDeltat - kappa \nleft( fracT_i-1j^n+1 - 2 T_ij^n+1 + T_i+1j^n+1Deltax^2 + fracT_ij-1^n+1 - 2 T_ij^n+1 + T_ij+1^n+1Deltay^2  \nright) - fracQ_ij^nrho c_p = R\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n-b T_ij-1^n+1 - a T_i-1j^n+1 + \nleft(2a + 2b + c right) T_ij^n+1 - \na T_i+1j^n+1 - b T_ij+1^n+1 - \nc T_ij^n - fracQ_ij^nrho c_p = \nR\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"where","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\na = frackappaDeltax^2  \nb = frackappaDeltay^2 \n textrmand  c = frac1Deltat \nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"For more details on the theory of the defect correction see here and on how this is implemented, see BackwardEuler.jl.","category":"page"},{"location":"man/DiffTwoD/#Cranck-Nicolson-Approach-(CNA)","page":"2D","title":"Cranck-Nicolson Approach (CNA)","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"In 2-D, equation (3) is described in a finite difference form as: ","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nfracT_ij^n+1 - T_ij^nDelta t = \nfrackappa2frac(T_i-1j^n+1-2T_ij^n+1+T_i+1j^n+1)+(T_i-1j^n-2T_ij^n+T_i+1j^n)Delta x^2 + \nfrackappa2frac(T_ij-1^n+1-2T_ij^n+1+T_ij+1^n+1)+(T_ij-1^n-2T_ij^n+T_ij+1^n)Delta y^2\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Rearranging equation (30) into known and unknown variables, one obtains a linear system of equations in the form of: ","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n-b T_ij-1^n+1 -aT_i-1j^n+1+left(2a + 2b + cright)T_ij^n+1 -aT_i+1j^n+1 -b T_ij+1^n+1 = b T_ij-1^n +aT_i-1j^n-left(2a + 2b - cright)T_ij^n +aT_i+1j^n +b T_ij+1^n\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Similar to the implicit method, we need to modify the coefficients and the right-hand side using different boundary conditions to obtain a symmetric coefficient matrix. Thus, the equations for the centroids adjacent to the boundaries are defined as: ","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Dirichlet","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"West (i=1)","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n-b T_1j-1^n+1 +\nleft(3a + 2b + c right) T_1j^n+1 \n-a T_2j^n+1 - b T_1j+1^n+1 = \nb T_1j-1^n - left( 3a + 2b - c right) T_1j^n + a T_2j^n + b T_1j+1^n + 4 a T_BCW\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"East (i = ncx)","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n-b T_ncxj-1^n+1 - a T_ncx-1j^n+1 +\nleft(3a + 2b + c right) T_ncxj^n+1 \n-b T_ncxj+1^n+1 = \nb T_ncxj-1^n + a T_ncx-1j^n -\nleft( 3a + 2b - c right) T_ncxj^n + b T_ncxj+1^n + 4 a T_BCE\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"South (j = 1)","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n-a T_i-11^n+1 +\nleft(2a + 3b + c right) T_i1^n+1 - a T_i+11^n+1 - b T_i2^n+1 = \na T_i-11^n - left( 2a + 3b - c right) T_i1^n + a T_i+11^n + b T_i2^n + 4 b T_BCS\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"North (j = ncy)","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n-b T_incy-1^n+1 + a T_i-1ncy^n+1 + left(2a + 3b + c right) T_incy^n+1 - a T_i+1ncy^n+1 = \nb T_incy-1^n + a T_i-1ncy^n - left( 2a + 3b - c right) T_incy^n + a T_i+1ncy^n + 4 b T_BCN\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Neumann","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"West (i=1)","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n-b T_1j-1^n+1 + left(a + 2b + c right) T_1j^n+1 - a T_2j^n+1 - b T_1j+1^n+1 = \nb T_1j-1^n - left( a + 2b - c right) T_1j^n + a T_2j^n + b T_1j+1^n - 2 a c_W Deltax\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"East (i = ncx)","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n-b T_ncxj-1^n+1 - a T_ncx-1j^n+1 + left(a + 2b + c right) T_ncxj^n+1 - b T_ncxj+1^n+1 = \nb T_ncxj-1^n + a T_ncx-1j^n - left( a + 2b - c right) T_ncxj^n + b T_ncxj+1^n + 2 a c_E Deltax\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"South (j = 1)","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n-a T_i-11^n+1 + left(2a + b + c right) T_i1^n+1 - a T_i+11^n+1 - b T_i2^n+1 = \na T_i-11^n - left( 2a + b - c right) T_i1^n + a T_i+11^n + b T_i2^n - 2 b c_S Deltay\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"North (j = ncy)","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n-b T_incy-1^n+1 + a T_i-1ncy^n+1 + left(2a + b + c right) T_incy^n+1 - a T_i+1ncy^n+1 = \nb T_incy-1^n + a T_i-1ncy^n - left( 2a + b - c right) T_incy^n + a T_i+1ncy^n + 2 b c_N Deltay\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"For more details on how this is implemented, see here.","category":"page"},{"location":"man/DiffTwoD/#Alternating-Direction-Implicit","page":"2D","title":"Alternating Direction Implicit","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"In 2-D, equation (3) for the ADI approach for each half-step in time is given as: ","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nfracT_ij^n+12-T_ij^nDelta t2 = \nkappa \n    left( \n    fracT_i-1j^n-2T_ij^n+T_i+1j^nDelta x^2 +\n    fracT_ij-1^n+12-2T_ij^n+12+T_ij+1^n+12Delta y^2\n    right)\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nfracT_ij^n+1-T_ij^n+12Delta t2 = \nkappa \n    left( \n    fracT_i-1j^n+1-2T_ij^n+1+T_i+1j^n+1Delta x^2 + \n    fracT_ij-1^n+12-2T_ij^n+12+T_ij+1^n+12Delta y^2\n    right)\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"This results in two linear sets of linear system of euqations with coefficient matrices for the left and right hand side of the equations. The corresponding coefficients and right hand side of each linear system of equations needs to be adjusted according to the given boundary conditions, as shown in the CNA, for example. For more details on how this is implemented, see here.","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"For the explicit solver and the defect correction method, one needs the extended temperature field, which includes the ghost nodes, to solve the temperature equation. Thereby, the current temperature field is assigned to the centroids of the extended field to use it as the old temperature and to calculate the temperature at the new time step. For the remaining solvers, the current temperature is assigned to the known righ-hand side vector, and one needs to collect the coefficients for each matrix to solve for the unknown temperature. ","category":"page"},{"location":"man/DiffTwoD/#Steady-State-Solution","page":"2D","title":"Steady State Solution","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Note: So far, variable thermal parameters are only implemented in the 1-D and 2-D steady state solutions (except for the 2-D defect correction method, which also enables a time-dependent 2-D solution for variable thermal parameters). ","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"In steady state, one assumes that the temperature does not vary over time (i.e., fracpartial Tpartial t=0) and the temperature equation simplifies to an elliptic partial differential equation (i.e., the Poission equation).  ","category":"page"},{"location":"man/DiffTwoD/#Poisson-Solution-(constant-*k*)","page":"2D","title":"Poisson Solution (constant k)","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"For constant thermal parameters the conductive part of the temperature equation is given by: ","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n0 = left( \n    fracpartial^2 Tpartial x^2 + fracpartial^2 Tpartial z^2\n    right) + fracQk\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"For the approximation of the spatial partial derivatives with finite difference expressions, a central finite difference is chosen and equation (42) is then given as: ","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\n0 = left( \nfracT_i-1j - 2T_ij + T_i+1jDelta x^2 + fracT_ij-1 - 2T_ij + T_ij+1Delta y^2\nright) + fracQk\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"where i and j are the indices for the x- and y-direction, respectively. Now, one can rearrange the equation by known (Q, k) and unknown (T) variables, wich results in a linear system of equations in the form of: ","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation \nbT_ij-1 + aT_i-1j - 2(a+b)T_ij + aT_i+1j + bT_ij+1 = -fracQk\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"where a = frac1Delta x^2 and b = frac1Delta y^2. ","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Here, one can again assume Dirichlet or Neumann boundary conditions, where one can use the temperature on the ghost nodes to properly implement the corresponding boundary conditions. Thereby, one needs to modify the coefficient matrix and the right hand side of the linear system of equations accordingly. ","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Dirichlet","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"West (i=1)","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nbT_1j-1 - (3a + 2b)T_1j + bT_1j+1 + aT_2j = -fracQ_ijk_ij - 2aT_BCW\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"East (i=ncx)","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\naT_ncx-1j + bT_ncxj-1 - (3a + 2b)T_ncxj + bT_ncxj+1 = -fracQ_ijk_ij - 2aT_BCE\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"South (j=1)","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\naT_i-11 - (2a + 3b)T_11 + bT_i2 + aT_i+11 = -fracQ_ijk_ij - 2bT_BCS\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"North (j=ncy)","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\naT_i-1ncy + bT_incy-1 - (2a + 3b)T_1ncy + aT_i+1ncy = -fracQ_ijk_ij - 2bT_BCN\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"Neumann","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"West (i=1)","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\nbT_1j-1 - (a + 2b)T_1j + bT_1j+1 + aT_2j = -fracQ_ijk_ij + ac_WDeltax\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"East (i=ncx)","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\naT_ncx-1j + bT_ncxj-1 - (a + 2b)T_ncxj + bT_ncxj+1 = -fracQ_ijk_ij - ac_EDeltax\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"South (j=1)","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\naT_i-11 - (2a + b)T_11 + bT_i2 + aT_i+11 = -fracQ_ijk_ij + bc_SDeltay\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"North (j=ncy)","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation\naT_i-1ncy + bT_incy-1 - (2a + b)T_1ncy + aT_i+1ncy = -fracQ_ijk_ij - bc_NDeltay\nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"For more details on how this is implemented see here.","category":"page"},{"location":"man/DiffTwoD/#Poisson-Solution-(variable-*k*)","page":"2D","title":"Poisson Solution (variable k)","text":"","category":"section"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"For variable thermal parameters the steady-state temperature equation is given by (in 2-D): ","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation \n0 = fracpartialpartial xleft(k_xfracpartial Tpartial xright) + \nfracpartialpartial yleft(k_yfracpartial Tpartial yright) + Q_ij \nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"To properly solve equation (53), one needs to apply a conservative finite difference scheme, such that the heat flux (q_i = k_ifracpartial Tpartial i), and thus the thermal conductivity, is defined between the centroids and the temperature on the centroids (see Figure 1). Considering such a staggered finite difference grid, equation (53) results in a linear system of equations in the form of: ","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"beginequation \nb k_yij T_ij-1 + a k_xij T_i-1j + c T_ij + a k_xi+1j T_i+1j + b k_yij+1 T_ij+1 + Q_ij = 0  \nendequation","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"where ","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"a = frac1Deltax^2\nb = frac1Deltay^2 textrmand  \nc = -aleft(k_xi+1j+k_xijright) - bleft(k_yij+1+k_yijright)","category":"page"},{"location":"man/DiffTwoD/","page":"2D","title":"2D","text":"For more details on how this is implemented see here.","category":"page"},{"location":"man/GESolution/#Solving-Differential-Equations","page":"Solution","title":"Solving Differential Equations","text":"","category":"section"},{"location":"man/GESolution/#Staggered-Finite-Difference","page":"Solution","title":"Staggered Finite Difference","text":"","category":"section"},{"location":"man/MomentumOneD/#Stokes-Equation-(1D)","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"","category":"section"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"x-component","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"beginequation\n0 = -fracpartialPpartialx + fracpartialtau_xypartialy\nendequation","category":"page"},{"location":"man/MomentumOneD/#Discretization","page":"Stokes Equation (1D)","title":"Discretization","text":"","category":"section"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"<!– add figure of grid –>","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"***Constant Viscosity***","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"beginequation\n0 = -fracpartialPpartialx + etafracpartial^2v_xpartialy^2\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"<!–Approximation of partial derivatives with finite difference operators ... –>","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"beginequation\nfracpartialPpartialx=av_xj-1+bv_xj+cv_xj+1 \nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"where","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"a = c = fracetaDeltay^2 textrmand b = -frac2etaDeltay^2","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"***Variable Viscosity***","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"beginequation\n0 = -fracpartialPpartialx + fracpartialpartialyleft(etafracpartialv_xpartialyright)\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"beginequation\nfracpartialPpartialx=fraceta_j+1fracpartialv_xpartialyvert_j+1-eta_jfracpartialv_xpartialyvert_jDeltay\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"beginequation\nfracpartialPpartialx=fraceta_j+1fracv_xj+1-v_xjDeltay-eta_jfracv_xj-v_xj-1Deltayvert_jDeltay\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"beginequation\nfracpartialPpartialx=av_xj-1+bv_xj+cv_xj+1 \nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"where","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"beginequation\na = fraceta_jDeltay^2 b = -fraceta_j+eta_j+1Deltay^2 textrmand c = fraceta_j+1Deltay^2\nendequation","category":"page"},{"location":"man/MomentumOneD/#Boundary-Conditions","page":"Stokes Equation (1D)","title":"Boundary Conditions","text":"","category":"section"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"Dirichlet","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"Bottom (j=1)","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"beginequation\nV_GS = 2V_BCS - v_x1\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"Top (j=nc)","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"beginequation\nV_GN = 2V_BCN - v_xnc\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"Neumann","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"Bottom (j=1)","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"beginequation\nV_GS = v_x1 - c_sDeltay\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"Top (j=nc)","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"beginequation\nV_GN=v_xnc + c_NDeltay\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"where ","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"beginequation\nc_S = fracdv_xdyvert_j=1 textrmand c_N=fracdv_xdyvert_j=nc\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"<!– Change of the coefficient matrix and the right hand side ... –>","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"Dirichlet","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"Bottom (j=1)","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"beginequation\nleft(b-aright)v_x1+cv_x2 = fracpartialPpartialx - 2aV_BCS\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"Top (j=nc)","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"beginequation\nav_xnc-1+left(b-cright)v_xnx = fracpartialPpartialx - 2cV_BCN\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"Neumann","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"Bottom (j=1)","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"beginequation\nleft(b+aright)v_x1+cv_x2 = fracpartialPpartialx + ac_SΔy\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"Top (j=nc)","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"beginequation\nav_xnc-1+left(b+cright)v_xnx = fracPx - ac_NΔy\nendequation","category":"page"},{"location":"man/MomentumOneD/#Solution","page":"Stokes Equation (1D)","title":"Solution","text":"","category":"section"},{"location":"man/MomentumOneD/#Direct","page":"Stokes Equation (1D)","title":"Direct","text":"","category":"section"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"<!– rhs includes the boundary information! –>","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"beginequation\nboldK cdot v_x = rhs\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"beginequation\nv_x = boldK  rhs\nendequation","category":"page"},{"location":"man/MomentumOneD/#Defect-Correction","page":"Stokes Equation (1D)","title":"Defect Correction","text":"","category":"section"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"beginequation\nR = -fracPx + fracτ_xyy\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"beginequation\nR = -fracPx + boldK cdot v_x\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"beginequation\nR_i = -fracPx + boldK_i cdot v_xi\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"beginequation\n0 = -fracPx + boldKleft(v_xi+ deltav_x right) = boldKcdot v_xi -fracPx + boldKcdot deltav_x = R_i + boldK cdot deltav_x\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"beginequation\nR_i = -boldKcdotdeltav_x\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"beginequation\ndeltav_x = -boldK^-1R_i\nendequation","category":"page"},{"location":"man/MomentumOneD/","page":"Stokes Equation (1D)","title":"Stokes Equation (1D)","text":"beginequation\nv_x^n = v_xi + deltav_x\nendequation","category":"page"},{"location":"man/Ini/#Initial-Conditions","page":"Initial Conditions","title":"Initial Conditions","text":"","category":"section"},{"location":"man/license/","page":"-","title":"-","text":"MIT License","category":"page"},{"location":"man/license/","page":"-","title":"-","text":"Copyright (c) 2024 Goethe Universität Frankfurt, Institut für Geowissenschaften","category":"page"},{"location":"man/license/","page":"-","title":"-","text":"Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:","category":"page"},{"location":"man/license/","page":"-","title":"-","text":"The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.","category":"page"},{"location":"man/license/","page":"-","title":"-","text":"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","category":"page"},{"location":"man/DiffOneD/#Temperature-Equation-(1D)","page":"1D","title":"Temperature Equation (1D)","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"In one dimension, the conductive part of the temperature equation is described by (assuming only radiogenic heat sources):","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nfracpartial Tpartial t = -fracpartial q_xpartial x + rho H\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"or including Fourier’s law (assuming variable thermal parameters):","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nfracpartial Tpartial t = fracpartialpartial x k_x fracpartial Tpartial x + rho H \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Assuming that the thermal parameters are constant, equation (2) simplifies to: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nfracpartial Tpartial t = kappa fracpartial^2 Tpartial x^2 + fracQrho c_p\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where kappa = krho c_p is the thermal diffusivity [ m^2s ] and Q=rho H is the heat production rate per volume [ Wm^3 ]. Equation (3) is a parabolic partial differential equation (PDE) which can be solved numerically in different manners, assuming initial and boundary conditions are defined. ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"First, let us discuss a simple, but effective, finite difference method to discretize and solve the equation, that is the forward in time and centered in space (FTCS) method in an explicit manner. This finite difference scheme will converge to the exact solution for small Deltax and Deltat. The advantage of an explicit description is that it is simple to derive and rather fast computationally. However, it is only numerically stable as long as the heat diffusion stability criterion is fulfilled. The stability criterion can be determined by a Von Neumann stability analysis, which analyzes the growth of an eigenmode perturbation for a certain finite difference approach. In case of an explicit 1-D finite difference approach, the heat diffusion stability criterion is defined as (assuming equal grid spacing):","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nDelta t  fracDelta x^22 kappa\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Thus, the maximum time step is limited by the model’s resolution. ","category":"page"},{"location":"man/DiffOneD/#Discretization","page":"1D","title":"Discretization","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"To numerically solve equation (3) one needs to discretize the numerical domain and assign the parameters to their corresponding nodes. Note: Even though the thermal conductivity is  assumed to be constant (for now), we chose a conservative gridding for the sake of continuity, that is the temperature T is defined on the centroids and the heat flux q in between. ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"(Image: 1DDiscretization)","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Figure 1. 1-D Discretization. Conservative finite difference grid to solve the 1-D conductive part of the temperature equation. The temperature is defined on the centroids and the heat flux on the vertices. The temperature ghost nodes are used to properly implement Dirichlet and Neumann thermal boundary conditions.  ","category":"page"},{"location":"man/DiffOneD/#Explicit,-*FTCS*-(or-Forward-Euler-Method)","page":"1D","title":"Explicit, FTCS (or Forward Euler Method)","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Using an FTCS explicit finite difference scheme to approximate the partial derivatives from equation (3) results in:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nfracT_i^n+1 - T_i^n Delta t = kappa fracT_i-1^n - 2T_i^n + T_i+1^nDeltax^2 + fracQ_i^nrho c_p\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where i is the horizontal index of the numerical finite difference grid, n is the time step index, Deltat is the time step, and Deltax the width of the grid in horizontal direction. Equation (5) contains know and unknow parameters and one can rearrange them to solve the equation for the unknowns as:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nT_i^n+1 = T_i^n + a left(T_i-1^n - 2T_i^n + T_i+1^n right) + fracQ_i^n Delta trho c_p \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where a = frackappa Delta tDeltax^2. Equation (6) can be solved iteratively for every centroid assuming initial and boundary coniditions are defined. For more details on how this is implemented see 1Dsolvers.jl.","category":"page"},{"location":"man/DiffOneD/#Boundary-Conditions","page":"1D","title":"Boundary Conditions","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Different thermal boundary conditions can be set for which one utilizes the ghost nodes. Here, let us focus on two fundamental conditions, the Dirichlet and Neumann boundary conditions. To consider each boundary condition to solve the equations, one needs to define the temperature at the ghost nodes. The Dirichlet boundary condition defines a constant temperature along the boundary, such that the temperatures at the left (west) and right (east) ghost nodes are defined as:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nT_GW = 2T_BCW - T_1\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nT_GE = 2T_BCE - T_nc\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where T_GW, T_GE and T_BCW, T_BCE are the temperature at the left and right ghost nodes and the constant temperatures at the left and right boundary, respectively, and nc is the number of centroids.  ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"The Neumann boundary condition defines that the variation of a certain parameter does not change across the boundary, that is, for example, the temperature across the boundary or thermal heat flux q through the boundary. The temperature at the ghost nodes is then defined as: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nT_GW = T_1 - c_W Deltax\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nT_GE = T_nc + c_E Deltax\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nleft c_W = fracpartialTpartialx rightvert_W textrmand left c_E = fracpartialTpartialx rightvert_E \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"are the constant temperature gradients across the left (West) and right (East) boundary, respectively. ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Now one can solve equation (6) for each centroid using the defined temperature at the ghost nodes for a certain boundary condition.","category":"page"},{"location":"man/DiffOneD/#Numerical-schemes","page":"1D","title":"Numerical schemes","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Within the example code Heat1Ddiscretization.jl different numerical schemes are used to solve the conductive part of the temperature equation (i.e., explicit, implicit, Crank-Nicholson Approach, and defect correction). In the following, we will briefly describe those well-know numerical schemes to solve the conductive part of the temperature equation and briefly discuss their advantages and disadvantages.","category":"page"},{"location":"man/DiffOneD/#Implicit,-FTCS-(or-Backward-Euler-Method)","page":"1D","title":"Implicit, FTCS (or Backward Euler Method)","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"The fully implicit finite difference scheme is unconditionally stable and one can use time steps larger than the diffusion stability criterion. In 1-D, the temperature equation is then given as: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nfracT_i^n+1-T_i^nDelta t = kappa fracT_i-1^n+1-2T_i^n+1+T_i+1^n+1Delta x^2 + fracQ_i^nrho c_p\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where n is the current and n+1 the next time step, Deltat is the time step length, Deltax is the horizontal grid spacing, and i is the horizontal index, respectively. Rearranging equation (12) into known and unknown variables, one obtains a linear system of equations in the form of: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\n-a T_i-1^n+1 + left(2a + b right) T_i^n+1 - a T_i+1^n+1 = b T_i^n + fracQ_i^nrho c_p\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where a = frackappaDeltax^2 and b = frac1Deltat. This is a linear system of equation in the form of boldsymbolAcdot overrightharpoonx = overrightharpoonrhs, where boldsymbolA is a coefficient matrix (here with three non-zero diagonals), overrightharpoonx the unknown vector, and overrightharpoonrhs the known right-hand side. We choose to distribute the coefficients in such a way and kept the time step on the right-hand side of the euqation to ensure that the coefficient matrix is the same as used in the defect correction method. ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"The main advantage of the implicit method is that there are no restrictions on the time step. However, this does not mean that it is more accurate. Taking too large time steps may result in an inaccurate solution for features with small spatial scales.","category":"page"},{"location":"man/DiffOneD/#Boundary-Conditions-2","page":"1D","title":"Boundary Conditions","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"The temperature at the ghost nodes to solve the equations on the centroids adjacent to the boundary are defined as before (equations (7)-(10) ). To obtain a symmetric coefficient matrix to solve the linear system of euqations, however, one needs to modify the coefficients for the centroids adjacent to the boundary and the corresponding right-hand side, such that the equations are defined as:  ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Dirichlet","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"West (i=1)","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nleft(3 a + bright) T_1^n+1 - a T_2^n+1 = b T_1^n + 2 a T_BCW\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"East (i=nc)","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\n-a T_nc-1^n+1 + left(3 a + bright) T_nc^n+1  = b T_nc^n + 2 a T_BCE \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Neumann","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"West (i=1)","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nleft(a + bright) T_1^n+1 - a T_2^n+1 = b T_1^n - a c_W Deltax\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"East (i=nc)","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\n-a T_nc-1^n+1 + left(a + bright) T_nc^n+1  = b T_nc^n + a c_E Deltax \nendequation","category":"page"},{"location":"man/DiffOneD/#Defect-Correction-Method","page":"1D","title":"Defect Correction Method","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"The defect correction method is an iterative solution, in which the residual of the conductive part of the temperature equation for an initial temperature condition is reduced by a correction term. In case, the system is linear, one iteration is sufficient enough to obtain the exact solution. ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Theory","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"The conductive part of the equation, in an implicit form, can be simplified to an equation in the form of: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nboldsymbolK cdot T - b = R \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where boldsymbolK is the coefficient matrix, T is the temperature at the new time step, b is a term containing the remaining variables (e.g., the current temperature and the radioactive heat source), and R is the resiual. Assuming an initial temperature guess T_i, the initial residual R_i is given by: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nR_i = boldsymbolK cdot T_i - b\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Adding a correction term deltaT to the initial guess, assuming that it results in zero residual, leads to: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\n0 = boldsymbolK left(T_i + deltaT right) - b = boldsymbolK T_i - b + boldsymbolK deltaT = R_i + boldsymbolK deltaT\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"which results in:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nR_i = -boldsymbolK deltaT \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"and finally the correction term: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\ndeltaT = -boldsymbolK^-1 R_i \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"The coefficients of the matrix can be derived, for example, via: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nfracpartialTpartialt - kappa fracpartial^2Tpartialx^2 = R \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nfracT_i^n+1-T_i^nDeltat - kappa fracT_i-1^n+1 - 2 T_i^n+1 + T_i+1^n+1Deltax^2 = R\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\n-a T_i-1^n+1 + left(2 a + b right) T_i^n+1 - a T_i+1^n+1 - b T_i^n = R \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\na = frackappaDeltax^2 textrmand  b = frac1Deltat \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Similar to the implicit FTCS method, one needs to adjust the coefficients for the centroids adjacent to the boundaries (see equations (14)-(17) ), however, no adjustment needs to be made on the right-hand side.","category":"page"},{"location":"man/DiffOneD/#Crank-Nicolson-approach-(CNA)","page":"1D","title":"Crank-Nicolson approach (CNA)","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"The fully implicit FTCS method works well, but is only first order accurate in time. A way to modify this is to employ a Crank-Nicolson time step discretization, which is implicit and, thus, second order accurate in time. In 1-D, equation (5) is then described as: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nfracT_i^n+1 - T_i^nDelta t = frackappa2frac(T_i-1^n+1-2T_i^n+1+T_i+1^n+1)+(T_i-1^n-2T_i^n+T_i+1^n)Delta x^2 \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Rearranging the parameters in knowns and unknows results in a linear system of equations as followed: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\n-aT_i-1^n+1 + left(b+2aright)T_i^n+1 - a T_i+1^n+1 = aT_i-1^n + left(b-2aright)T_i^n + a T_i+1^n\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where a = frackappa2Deltax^2 and b = frac1Deltat. ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Similar to the implicit FTCS method, we need to modify the coefficients of the matrix and the right-hand side using different boundary conditions to obtain a symmetric coefficient matrix. Thus, the equations for the centroids adjacent to the boundaries are defined as: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Dirichlet","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"West (i=1)","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nleft(b + 3 a right) T_1^n+1 - a T_2^n+1 = left( b - 3 a right) T_1^n + a T_2^n + 4 a T_BCW\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"East (i=nc)","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\n-a T_nc-1^n+1 + left(b + 3 a right) T_nc^n+1 = a T_nc-1^n + left( b - 3 a right) T_nc^n + 4 a T_BCE\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Neumann","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"West (i=1)","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nleft(b+aright)T_1^n+1 - a T_2^n+1 = left(b-aright)T_1^n + a T_2 - 2ac_W Deltax\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"East (i=nc)","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\n-a T_nc-1^n+1 + left(b+aright)T_nc^n+1  = a T_nc-1^n + left(b-aright)T_nc^n + 2ac_E Deltax\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"However, the band-width of the coefficient matrix increases as in the fully implicit case. Thus, the method becomes memory intensiv for models with a high resoltuion. For more details on how this is implemented, see 1Dsolvers.jl.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"For the explicit solver and the defect correction method, one needs the extended temperature field, which includes the ghost nodes, to solve the temperature equation. Thereby, the current temperature field is assigned to the centroids of the extended field to use it as the old temperature and calculate the temperature at the new time step. For the remaining solvers, we assign the current temperature to the known righ-hand side vector, collect the coefficients for each matrix and solve for the unknown temperature.","category":"page"},{"location":"man/DiffOneD/#Variable-Thermal-Parameters","page":"1D","title":"Variable Thermal Parameters","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"To sove the conductive part of the 1-D temperature equation assuming variable thermal parameters one needs a proper conserving finite difference scheme. That is, the heat flow is calculated on the vertices and the temperature is defined on the centroids, respectively. The 1-D temperature equation is then given by: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nrho c_p fracpartialTpartialt = fracpartialpartialyleft(k fracpartialTpartialyright) + rho H\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where rho c_p T t k H and y are the density [ kgm^3 ], the specific heat capacity [ JkgK ], the temperature [ K ], the time [ s ], the thermal conductivity [ WmK ], the heat generation rate per mass [ Wkg ], and the depth [ m ], respectively.","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"A proper conservative finite difference scheme means that the 1-D vertical heat flux q_y and the thermal conductivity k are defined on the vertices, where q_x is defined as:","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nleft q_ym = -k_m fracpartial Tpartial yrightvert_m textrmfor m = 1nv \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where nv is the number of vertices. ","category":"page"},{"location":"man/DiffOneD/#*Solving-the-equation*","page":"1D","title":"Solving the equation","text":"","category":"section"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Following the discretization as described above, one needs to solve the following equation for each centroid (in an explicit finite difference formulation):","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nrho_j c_pj fracT_j^n+1 - T_j^nDeltat = -fracq_yj+1^n - q_yj^n Deltay + rho_j H_j textrmfor j = 1nc \nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where T is defined on the centroids, q_y and k are defined on the vertices, Deltat is the time step length, and Deltay is the grid resolution. Further replacing q_y results in: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nrho_j c_pj fracT_j^n+1 - T_j^nDeltat = frac k_j+1 fracT_j+1^n - T_j^nDeltay - k_j fracT_j^n - T_j-1^nDeltay Deltay + rho_j H_j\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"Sorting the variables (known variables on the right-hand side, unknown on the left-hand side) results in: ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\nT_j^n+1 = ak_jT_j-1^n + left(1-aleft(k_j+1+k_jright)right)T_j^n + ak_j+1T_j+1^n + fracH_jDeltatc_pj\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"where ","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"beginequation\na = fracDeltatDeltay^2 rho c_p_j\nendequation","category":"page"},{"location":"man/DiffOneD/","page":"1D","title":"1D","text":"For the centroids adjacent to the boundaries one needs to use the ghost nodes and their correspondingly calculated temperatures, depending on the choosen thermal boundary condition (see equations (7)-(10)).","category":"page"},{"location":"man/listoffunctions/#List-of-all-functions","page":"List of functions","title":"List of all functions","text":"","category":"section"},{"location":"man/listoffunctions/","page":"List of functions","title":"List of functions","text":"Here an overview of all functions:","category":"page"},{"location":"man/listoffunctions/","page":"List of functions","title":"List of functions","text":"Modules = [GeoModBox]","category":"page"},{"location":"man/MomentumMain/#Momentum-Equation","page":"Momentum Equation","title":"Momentum Equation","text":"","category":"section"},{"location":"man/MomentumMain/","page":"Momentum Equation","title":"Momentum Equation","text":"On geological time scales, Earth’s mantle and lithosphere do behave like a fluid and move and deform. A fluid does generally move due to forces acting on it whereas the forces must be in balance. In general, there are three major forces one might consider, i.e., inertia, surface, and volumetric forces. A common equation to describes such motion is given by: ","category":"page"},{"location":"man/MomentumMain/","page":"Momentum Equation","title":"Momentum Equation","text":"beginequation\nrho fracD overrightharpoonvDt = overrightharpoonnabla cdot boldsymbolsigma + rho boldsymbolg\nendequation","category":"page"},{"location":"man/MomentumMain/","page":"Momentum Equation","title":"Momentum Equation","text":"where rho is the density [ kgm^3 ], overrightharpoonv is the velocity vector [ ms ], boldsymbolsigma is the Cauchy stress tensor [ Pa ], boldsymbolg is the gravitational acceleration [ ms^2 ], and the term on the left-hand side is the Lagrangian time derivative which is in Eulerian form fracDDt = fracpartialpartialt + overrightharpoonv cdot overrightharpoonnabla. ","category":"page"},{"location":"man/MomentumMain/","page":"Momentum Equation","title":"Momentum Equation","text":"The Cauchy stress tensor is given by: ","category":"page"},{"location":"man/MomentumMain/","page":"Momentum Equation","title":"Momentum Equation","text":"beginequation\nboldsymbolsigma = -overrightharpoonnablaP + overrightharpoonnabla cdot boldsymboltau\nendequation","category":"page"},{"location":"man/MomentumMain/","page":"Momentum Equation","title":"Momentum Equation","text":"where P is the total pressure (P = P_dynamic + P_hydrostatic) and boldsymboltau the deviatoric stress tensor. ","category":"page"},{"location":"man/MomentumMain/","page":"Momentum Equation","title":"Momentum Equation","text":"In Eulerian form, equation (1) is given by (Navier-Stokes equation):","category":"page"},{"location":"man/MomentumMain/","page":"Momentum Equation","title":"Momentum Equation","text":"beginequation\nrho left(fracpartialv_ipartialt + v_jfracv_ipartialx_jright) = -fracpartialPpartialx_i + fractau_ijpartialx_j + rho g_i\nendequation","category":"page"},{"location":"man/MomentumMain/","page":"Momentum Equation","title":"Momentum Equation","text":"where summation over repeated indices is implied.","category":"page"},{"location":"man/MomentumMain/#Constitutive-Relation","page":"Momentum Equation","title":"Constitutive Relation","text":"","category":"section"},{"location":"man/MomentumMain/","page":"Momentum Equation","title":"Momentum Equation","text":"To solve equation (3), one needs to define a rheology which, for a purely viscous medium, can be given by a constitutive relationship between stress and strain rate in the form of, e.g.:","category":"page"},{"location":"man/MomentumMain/","page":"Momentum Equation","title":"Momentum Equation","text":"beginequation\ntau_ij = 2 eta cdot dotvarepsilon_ij\nendequation","category":"page"},{"location":"man/MomentumMain/","page":"Momentum Equation","title":"Momentum Equation","text":"where eta is the dynamic viscosity in [ Pa s ] and dotvarepsilon_ij the strain rate tensor in [ 1s ] and given by: ","category":"page"},{"location":"man/MomentumMain/","page":"Momentum Equation","title":"Momentum Equation","text":"beginequation\ndotvarepsilon_ij = frac12 left(fracpartialv_ipartialx_j + fracpartialv_jpartialx_iright)\nendequation","category":"page"},{"location":"man/MomentumMain/#Stokes-Equation","page":"Momentum Equation","title":"Stokes Equation","text":"","category":"section"},{"location":"man/MomentumMain/","page":"Momentum Equation","title":"Momentum Equation","text":"Assuming that the inertia forces are negligible in comparison to the gravitational forces, one can further simplify equation (3) to:","category":"page"},{"location":"man/MomentumMain/","page":"Momentum Equation","title":"Momentum Equation","text":"beginequation\n0 = -fracpartialPpartialx_i + fractau_ijpartialx_j + rho g_i\nendequation","category":"page"},{"location":"man/MomentumMain/","page":"Momentum Equation","title":"Momentum Equation","text":"or in the form of the unknowns v_x, v_y, and P:","category":"page"},{"location":"man/MomentumMain/","page":"Momentum Equation","title":"Momentum Equation","text":"beginequation\n0 = -fracpartialPpartialx_i + fracpartialpartialx_j eta left(fracpartialv_ipartialx_j + fracpartialv_jpartialx_iright) + rho g_i\nendequation","category":"page"},{"location":"man/MomentumMain/","page":"Momentum Equation","title":"Momentum Equation","text":"Assuming a constant viscosity further simplifies equation (7) to: ","category":"page"},{"location":"man/MomentumMain/","page":"Momentum Equation","title":"Momentum Equation","text":"beginequation\n0 = -fracpartialPpartialx_i + eta left(fracpartial^2v_ipartialx_j^2 + fracpartial^2v_jpartialx_i^2right) + rho g_i\nendequation","category":"page"},{"location":"man/MomentumMain/","page":"Momentum Equation","title":"Momentum Equation","text":"To numerically solve for the three unknows v_x, v_y, and P, one needs to discretize the x- and y-component of the momentum equation and the continuum equation. Here, we assume an incompressible medium, i.e. we use the so called Boussinesq-approximation. ","category":"page"},{"location":"man/MomentumMain/#Continuum-Equation","page":"Momentum Equation","title":"Continuum Equation","text":"","category":"section"},{"location":"man/MomentumMain/","page":"Momentum Equation","title":"Momentum Equation","text":"Equation (8) provides us two equations for our three unknowns. Thus, one needs to also consider the mass conservation equation (we do work with a continuum), where one can further simplify the problem by assuming an incompressible fluid (i.e., Boussinesq-approximation):","category":"page"},{"location":"man/MomentumMain/","page":"Momentum Equation","title":"Momentum Equation","text":"beginequation\nfracpartialv_ipartialx_i = 0\nendequation","category":"page"},{"location":"man/MomentumMain/","page":"Momentum Equation","title":"Momentum Equation","text":"Equations (8) and (9) enable us to solve for the three unknowns v_x, v_y, and P. ","category":"page"},{"location":"man/MomentumMain/#Equation-of-State","page":"Momentum Equation","title":"Equation of State","text":"","category":"section"},{"location":"man/MomentumMain/","page":"Momentum Equation","title":"Momentum Equation","text":"The buoyance term on the right-hand side of equation (7), that is the density term which is temperature dependent (and pressure, but I do neglect this effect here so far), can be approximated with the so-called equation of state for the density. Here, its is a linear approximation of the change of density due to temperature variations and can be defined as:","category":"page"},{"location":"man/MomentumMain/","page":"Momentum Equation","title":"Momentum Equation","text":"beginequation\nrho = rho_0 (1-alpha T)\nendequation","category":"page"},{"location":"man/MomentumMain/","page":"Momentum Equation","title":"Momentum Equation","text":"where ρ_0 is the reference density and alpha the thermal expansion coefficient [ 1K ]. ","category":"page"},{"location":"man/Examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"man/Examples/#Diffusion-Equation","page":"Examples","title":"Diffusion Equation","text":"","category":"section"},{"location":"man/Examples/#Geotherm-(1D)","page":"Examples","title":"Geotherm (1D)","text":"","category":"section"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"The 1-D temperature profiles of a geotherm are calculated by solving the conductive part of the 1-D temperature equation (so far only including a radiogenic heat source) using variable thermal parameters with a proper conserving finite difference scheme. That is, the heat flow is calculated on the vertices and the temperature is defined on the centroids, respectively. The discretization scheme for variable thermal parameters is choosen to solve for a temperature profile of a continental lithosphere with upper, lower crust, and mantle. The 1-D temperature equation is given by: ","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"beginequation\nrho c_p fracpartialTpartialt = fracpartialpartialyleft(k fracpartialTpartialyright) + rho H\nendequation","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"where rho c_p T t k H and y are the density [ kgm^3 ], the specific heat capacity [ JkgK ], the temperature [ K ], the time [ s ], the thermal conductivity [ WmK ], the heat generation rate per mass [ Wkg ], and the depth [ m ] respectively. For values and references of the given thermal parameters see OceanicGeotherm_1D.jl and ContinentalGeotherm_1D.jl.","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"A proper conservative finite difference scheme means that the 1-D vertical heat flux and the thermal conductivity k are defined on the vertices and q is defined as:","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"beginequation\nleft q_ym = -k_m fracpartial Tpartial yrightvert_m textrmfor m = 1nv \nendequation","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"where nv is the number of vertices. ","category":"page"},{"location":"man/Examples/#Oceanic","page":"Examples","title":"Oceanic","text":"","category":"section"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"(Image: OceanicGeotherm)","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"Figure 1. ... ","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"(Image: OceanicGeothermII)","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"Figure 2. Oceanic Lithosphere. LEFT: Temperature profile [K]  for an oceanic lithosphere of 60 Ma of age and constant thermal boundary conditions at the top and bottom. The blue line shows the initial temperature profile. The yellow dashed line shows the solution for a half-space cooling model. RIGHT: Heat flux q_y [ mWm^2 ] with depth. The parameters of this model are defined as the default values in the routine OceanicGeotherm_1D.jl. ","category":"page"},{"location":"man/Examples/#Continental","page":"Examples","title":"Continental","text":"","category":"section"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"(Image: ContinentalGeotherm)","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"Figure 3. ... ","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"(Image: ContinentalGeothermII)","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"Figure 4. Continental Lithosphere. LEFT: Temperature profile for a continental lithosphere of 1000 Ma of age with constant upper and lower thermal boundary conditions. MIDDLE: Heat flux with depth. RIGHT: Thermal parameter for the lithosphere setup: thermal conductivity [ k ], specific heat [ c_p ], density [ ρ ], and volumetric heat generation rate [ Q ]. ","category":"page"},{"location":"man/Examples/#[Gaussian-Diffusion](https://github.com/LukasFuchs/GeoModBox.jl/blob/main/examples/DiffusionEquation/1D/Heat_1D_discretization.jl)","page":"Examples","title":"Gaussian Diffusion","text":"","category":"section"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"<!– Information missing! –>...","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"(Image: GaussianDiffusion)","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"Figure 5. Diffusion of an initial Gaussian temperature distribution.... ","category":"page"},{"location":"man/Examples/#[Backward-Euler](https://github.com/LukasFuchs/GeoModBox.jl/blob/main/examples/HeatEquation/2D/BackwardEuler.jl)","page":"Examples","title":"Backward Euler","text":"","category":"section"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"-> A gaussian diffusion using the defection correction method. The results are compared to the analytical solution.  ","category":"page"},{"location":"man/Examples/#[Forward-Euler](https://github.com/LukasFuchs/GeoModBox.jl/blob/main/examples/HeatEquation/2D/ForwardEuler.jl)","page":"Examples","title":"Forward Euler","text":"","category":"section"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"-> A gaussian diffusion using an explicit formulation. The results are compared to the analytical solution. ","category":"page"},{"location":"man/Examples/#[Gaussian-Diffusion](https://github.com/LukasFuchs/GeoModBox.jl/blob/main/examples/HeatEquation/2D/Gaussian_Diffusion.jl)","page":"Examples","title":"Gaussian Diffusion","text":"","category":"section"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"-> Script to solve a 2-D gaussian diffusion using multiple different finite difference schemes and resolutions. The results are compared to the analytical solution and the final plot shows a resolution test including each finite difference scheme.","category":"page"},{"location":"man/Examples/#[Resolution-Test-Poisson-Problem](https://github.com/LukasFuchs/GeoModBox.jl/blob/main/examples/HeatEquation/2D/Poisson_ResTest.jl)","page":"Examples","title":"Resolution Test Poisson Problem","text":"","category":"section"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"-> Resolution test for a 2-D Poisson Problem. ","category":"page"},{"location":"man/Examples/#[Poisson-Variable-Parameters](https://github.com/LukasFuchs/GeoModBox.jl/blob/main/examples/HeatEquation/2D/Poisson_variable_k.jl)","page":"Examples","title":"Poisson Variable Parameters","text":"","category":"section"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"-> 2-D Poisson Problem with variable thermal parameters.","category":"page"},{"location":"man/Examples/#Advection-Equation","page":"Examples","title":"Advection Equation","text":"","category":"section"},{"location":"man/Examples/#Momentum-Equation","page":"Examples","title":"Momentum Equation","text":"","category":"section"},{"location":"man/Examples/#[Channel-Flow](https://github.com/LukasFuchs/GeoModBox.jl/blob/main/examples/StokesEquation/1D/ChannelFlow_1D.jl)","page":"Examples","title":"Channel Flow","text":"","category":"section"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"<!–","category":"page"},{"location":"man/Examples/#Channel-Flow","page":"Examples","title":"Channel Flow","text":"","category":"section"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"&emsp; Assuming the horizontal pressure gradient is constant and flow within a channel is only driven by the pressure and/or by a constant horizonal velocity at the surface (or at the bottom, or both), the stokes equation describes the horizontal flow velocity within the channel and simplifies to: ","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"$","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"\\frac{\\partial P}{\\partial x} = \\frac{\\partial \\tau_{x,z}}{\\partial z} $,","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"where P is the pressure and tau_xz is the deviatoric shear stress, which is defined as: ","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"tau_xz = 2 eta dotvarepsilon_xz = eta fracpartial v_xpartial z","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":",","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"where eta is the dynamic viscosity and dotvarepsilon_xz is the deviatoric shear strain-rate, which is defined as: ","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"dotvarepsilon_xz = frac12(fracpartial v_xpartial z + fracpartial v_zpartial x)","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":".","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"For the given setup I can assume that the vertical velocity is zero and thus equation (3) simplifies to the last expression of equation (2).","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"&emsp; This directory contains a script to calculate the horizontal velocity for a two-dimensional Couette(-Poiseuille) channel flow with constant and logarithmically, with depth varying viscosity and to compare the numerical solution with its analytical solution. The depth-dependent viscosity is defined as: ","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"eta = eta_0 exp(log(m) fracH-zH)","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":",","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"where m is the viscosity ratio of fraceta_1eta_0, eta_0 and eta_1 are the bottom and surface viscosities, respectively, H is the model height, and z the depth. ","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"&emsp;Considering the definition of the viscosity as given in equation (4), one can derive an analytical solution of the horizontal velocity from the 1-D stokes equation in x-direction by twice integrating equation (1). The analytical solution with depth depends on the viscosity ratio m, the horizontal pressure gradient fracpartial Ppartial x, and the shear velocity at the surface v_x0. For an upward pointing coordinate system (z positive) the analytical solution is given as: ","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"v_xana =-frac12 eta_0 fracpartial Px (Hz - z^2) + v_x0fraczH","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":",&emsp;&emsp; if m = 1, and &emsp;&emsp;&emsp; (5)","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"v_xana = -fracpartial Ppartial x fracHeta_0 log(m) (fracm^-fraczHm-1(z(m-1)+H) - fracHm-1)-m^-fraczH m fracv_x0m-1 + fracv_x0mm-1","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":", &emsp;&emsp; if m neq 0.&emsp;&emsp;&emsp; (6)","category":"page"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"&emsp;The numerical solution is calculated using fixed boundary velocities, which are defined by the analytical solution of the horizontal velocity as defined in equations (5) and (6) and I simply flip the analytical solution so that it fits to the downward point coordinate system I use in the code. –>","category":"page"},{"location":"man/Examples/#[FallingBlockBenchmark()](https://github.com/LukasFuchs/GeoModBox.jl/blob/main/examples/StokesEquation/2D/FallingBlockBenchmark.jl)","page":"Examples","title":"FallingBlockBenchmark()","text":"","category":"section"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"-> A sript, solving the falling block benchmark for a viscosity range from -6 to 6 order of magnitude. The script stores the sinking velocity of the block at the initial configuration and the final marker distribution for models with a viscosity ration over and equal 0. ","category":"page"},{"location":"man/Examples/#[FallingBlockConstEta_DC()](https://github.com/LukasFuchs/GeoModBox.jl/blob/main/examples/StokesEquation/2D/FallingBlockConstEta_Dc.jl)","page":"Examples","title":"FallingBlockConstEta_DC()","text":"","category":"section"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"-> A sript, solving the falling block problem assuming a constant viscosity and using the defect correction method.  ","category":"page"},{"location":"man/Examples/#[FallingBlockVarEta_DC()](https://github.com/LukasFuchs/GeoModBox.jl/blob/main/examples/StokesEquation/2D/FallingBlockVarEta_DC.jl)","page":"Examples","title":"FallingBlockVarEta_DC()","text":"","category":"section"},{"location":"man/Examples/","page":"Examples","title":"Examples","text":"-> A sript, solving the falling block problem assuming a variable viscosity and using the defect correction method. The advection is only provided with tracers","category":"page"},{"location":"#GeoModBox.jl","page":"Home","title":"GeoModBox.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The Geodynamic Modelling ToolBox is a julia package mainly used for teaching purposes. The package provides different finite difference, staggered, discretization schemes to numerically solve the governing equations for a two-dimensional geodynamic problem. The governing equations are the conservation equations of ","category":"page"},{"location":"","page":"Home","title":"Home","text":"energy, \nmomentum, \nmass and compositon. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The GeoModBox.jl includes a series of exercises and examples of different geodynamically well defined problems. The exercises are given as Jupyter notebooks for the students to complete. The theoretical background is mainly given here in the documentation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Staggered-Finite-Difference","page":"Home","title":"Staggered Finite Difference","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#[Energy-Conservation-Equation](./man/DiffMain.md)","page":"Home","title":"Energy Conservation Equation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In geodynamics, the energy is described by the temperature and needs to be conserved within a closed system. Here, we solve the temperature conservation equation, or temperature equation, using an operator splitting method, that is, we first solve the advective part of the temperature equation, followed by the diffusive part. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#[Heat-Diffusion-Equation](./man/DiffOneD.md)","page":"Home","title":"Heat Diffusion Equation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The GeoModBox.jl provides different finite difference (FD) schemes (e.g., forward and backward Euler, Crank-Nicholson approach, ADI) to solve the diffusive part of the time-dependent or steady-state temperature equation including radioactive heating, in 1-D and 2-D. The solvers are located in src/HeatEquation. So far, only Dirichlet and Neumann thermal boundary conditions are available. Currently, most of the functions assume constant thermal parameters (except for the 1-D solvers). ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The examples of solving the heat diffusion equation include, amongst others: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"the determination of an oceanic and continental 1-D geotherm profile, \na comparison of the different FD-schemes applied on a 1-D gaussian temperature anomaly, \na 2-D resolution test for each FD-scheme using a gaussian temperature anomaly, and\na resolution test for a 2-D poisson problem. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"For more examples see the example folder. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The exercises include solving ","category":"page"},{"location":"","page":"Home","title":"Home","text":"the 1-D diffusion equation using the forward and backward Euler methods, \na 2-D poisson problem, and\na time-dependent temperature distribution within the lithosphere assuming a plume or sill.","category":"page"},{"location":"#[Heat-Advection-Equation](./man/AdvectMain.md)","page":"Home","title":"Heat Advection Equation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To solve the advective part of the temperature equation, the GeoModBox.jl provides the following different methods: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"an upwind scheme,\nthe staggered -leaped frog scheme, \na semi-lagrangian advection, and\npassive tracers/markers. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The solvers for a the tracer advection method are located in src/Tracers, where the remaining advection routines are located in src/AdvectionEquation. The routines are structured in such a way, that any property, as long as the property is defined on the centroids including ghost nodes on all boundaries, can be advected with the first three advection methods listed above. Using passive tracers, one can, so far, choose to either advect the temperature or phases. In case of advecting phases, one can define a certain rheology (eta) or density (rho) associated to each phase. The phase ID is used to interpolate the corresponding property from the tracers to the centroids. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"A key aspect for the advection equation is the conservation of the amplitude and the shape of an anomaly. Depending on the method, numerical diffusion or interpolation effects lead to strong deviations of the initial anomaly. For more details see here. The GeoModBox.jl contains several routines to setup a certain initial anomaly, either for properties defined on their correspondig grid (i.e., temperature, velocity, or phase) or for tracers advecting (so far) a certain temperature or phase. Within the examples and the exercise one can choose different initial temperature and velocity conditions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The examples for a two dimensional advection problem include:","category":"page"},{"location":"","page":"Home","title":"Home","text":"a 2-D advection, assuming a constant velocity field (e.g., a rigid body rotation), and\na resolution test of the same advection example. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The exercises include a: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"1-D advection of a gaussian or block anomaly, and\na 2-D advection coupled with the solution of the diffusion equation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#[Momentum-Conservation-Equation](./man/MomentumMain.md)","page":"Home","title":"Momentum Conservation Equation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Code-Structure","page":"Home","title":"Code Structure","text":"","category":"section"},{"location":"#Initial-Conditions","page":"Home","title":"Initial Conditions","text":"","category":"section"},{"location":"#Scaling","page":"Home","title":"Scaling","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#[Benchmarks-and-Examples](https://github.com/LukasFuchs/GeoModBox.jl/blob/main/examples/)","page":"Home","title":"Benchmarks and Examples","text":"","category":"section"},{"location":"#[Gaussian-Temperature-Diffusion](https://github.com/LukasFuchs/GeoModBox.jl/blob/main/examples/DiffusionEquation/2D/Gaussian_Diffusion.jl)","page":"Home","title":"Gaussian Temperature Diffusion","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: GaussianDiffusion)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Figure 1. Gaussian Diffusion. Time-dependent, diffusive solution of a 2-D Gaussian temperature anomaly using the Crank-Nicholson approach in comparison to its analytical solution. Top Left: 2-D temperature field of the numerical solution and isotherms lines of the numerical (solid black) and analytical (dashed yellow) solution. Top Right: Total deviation to the analytical solution. Bottom Left: 1-D y-profile along x=0. Bottom Right: Root Mean Square total devation of the temperature over time. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: GDResTest)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Figure 2. Resolution test. Maximum RMS varepsilon, maximum, and mean temperature for each FD-scheme and multiple resolutions. ","category":"page"},{"location":"#[Rigid-Body-Rotation](https://github.com/LukasFuchs/GeoModBox.jl/blob/main/examples/AdvectionEquation/2D_Advection.jl)","page":"Home","title":"Rigid-Body-Rotation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: RigidBodyI)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: RigidBodyII)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: RigidBodyIII)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Figure 3. Rigid-Body-Rotation. Time-dependent solution of a rotating circular temperature anomaly using the upwind (first), semi-lagrangian (second), and tracer (third) method. Within a circular area of our model domain the velocity is set to the velocity of a rigid rotation and outside euqal to zero. The temperature is scaled by the maximum temperature of the anomaly. ","category":"page"},{"location":"#[Falling-Block](https://github.com/LukasFuchs/GeoModBox.jl/blob/main/examples/StokesEquation/2D/FallingBlockBenchmark.jl)","page":"Home","title":"Falling Block","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: FallingBlockTD)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Figure 4. Isoviscous Falling Block. Time-dependent solution of an isoviscous falling block example. The problem is solved with a solver for variable viscosities. The tracers advect the phase ID, which is used to interpolate the density and viscosity on the centroids and vertices, respectively. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: FBSinkinVeloc)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Figure 5. Falling Block Sinking Velocity. Sinking velocity of the block with respect to the viscosity ratio eta_r at the initial condition. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: FBFinalStage)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Figure 6. Falling Block Benchmark. Final tracers distribution for specific cases with \\eta_r \\ge 0 $. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"man/AdvectMain/#Advection-Equation","page":"Advection Equation","title":"Advection Equation","text":"","category":"section"},{"location":"man/AdvectMain/#(1D)","page":"Advection Equation","title":"(1D)","text":"","category":"section"},{"location":"man/AdvectMain/#(2D)","page":"Advection Equation","title":"(2D)","text":"","category":"section"}]
}
